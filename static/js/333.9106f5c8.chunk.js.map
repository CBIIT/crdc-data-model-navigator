{"version":3,"file":"static/js/333.9106f5c8.chunk.js","mappings":"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","sources":["components/Contexts/DataCommonContext.tsx","config/ModelNavigator.ts","graphql/reviewApplication.ts","graphql/reopenApplication.ts","graphql/approveApplication.ts","graphql/inquireApplication.ts","graphql/rejectApplication.ts","graphql/saveApplication.ts","graphql/submitApplication.ts","graphql/getMyLastApplication.ts","graphql/getApplication.ts","graphql/updateMyUser.ts","graphql/listInstitutions.ts","graphql/retrieveCDEs.ts","graphql/listApplications.ts","graphql/createSubmission.ts","graphql/getSubmission.ts","graphql/listSubmissions.ts","graphql/submissionAction.ts","graphql/createBatch.ts","graphql/updateBatch.ts","graphql/listBatches.ts","graphql/submissionQCResults.ts","graphql/aggregatedSubmissionQCResults.ts","graphql/submissionCrossValidationResults.ts","graphql/validateSubmission.ts","graphql/listSubmissionNodeTypes.ts","graphql/getNodeDetail.ts","graphql/getRelatedNodes.ts","graphql/getSubmissionNodes.ts","graphql/submissionStats.ts","graphql/deleteDataRecords.ts","graphql/retrieveCLIConfig.ts","graphql/listPotentialCollaborators.ts","graphql/editSubmissionCollaborators.ts","graphql/getUser.ts","graphql/listUsers.ts","graphql/editUser.ts","graphql/requestAccess.ts","graphql/retrievePBACDefaults.ts","graphql/listOrganizations.ts","graphql/getOrganization.ts","graphql/editOrganization.ts","graphql/listActiveCurators.ts","graphql/listApprovedStudies.ts","graphql/createApprovedStudy.ts","graphql/updateApprovedStudy.ts","graphql/getApprovedStudy.ts","graphql/createOrganization.ts","graphql/grantToken.ts","graphql/getDashboardURL.ts","hooks/useBuildReduxStore.ts","content/modelNavigator/NavigatorView.tsx","components/ErrorBoundary/index.tsx","content/modelNavigator/Controller.tsx","hooks/usePageTitle.ts"],"sourcesContent":["import React, { FC, createContext, useContext, useEffect, useState } from \"react\";\nimport { fetchManifest } from \"../../utils\";\n\ntype LoadingState = {\n  status: Status.LOADING;\n  DataCommon: null;\n  error: null;\n};\n\ntype LoadedState = {\n  status: Status.LOADED;\n  DataCommon: DataCommon;\n  error: null;\n};\n\ntype ErrorState = {\n  status: Status.ERROR;\n  DataCommon: null;\n  error: Error;\n};\n\nexport type ContextState = LoadingState | LoadedState | ErrorState;\n\nexport enum Status {\n  LOADING = \"LOADING\",\n  LOADED = \"LOADED\",\n  ERROR = \"ERROR\",\n}\n\nconst initialState: ContextState = {\n  status: Status.LOADING,\n  DataCommon: null,\n  error: null,\n};\n\n/**\n * Data Common Context Provider\n *\n * NOTE: Do NOT use this context directly. Use the useDataCommonContext hook instead.\n *       this is exported for testing purposes only.\n *\n * @see ContextState\n * @see useDataCommonContext\n */\nexport const Context = createContext<ContextState>(null);\nContext.displayName = \"DataCommonContext\";\n\n/**\n * Data Common Context Hook\n *\n * Note:\n * - This fetches the manifest for the data common assets and caches it in the session\n * - If it fails to fetch the manifest, it will throw an error\n * - It will provide the DataCommon information, configuration, and model assets\n *\n * @see DataCommonProvider\n * @see ContextState\n * @returns {ContextState} - DataCommon context\n */\nexport const useDataCommonContext = (): ContextState => {\n  const context = useContext<ContextState>(Context);\n\n  if (!context) {\n    throw new Error(\n      \"useDataCommonContext cannot be used outside of the DataCommonProvider component\"\n    );\n  }\n\n  return context;\n};\n\ntype ProviderProps = {\n  DataCommon: DataCommon[\"name\"];\n  children: React.ReactNode;\n};\n\n/**\n * Creates a Data Common context provider\n *\n * @see useDataCommonContext\n * @param {ProviderProps} props\n * @returns {JSX.Element} Context provider\n */\nexport const DataCommonProvider: FC<ProviderProps> = ({ DataCommon, children }: ProviderProps) => {\n  const [state, setState] = useState<ContextState>(initialState);\n\n  useEffect(() => {\n    if (!DataCommon) {\n      setState({\n        status: Status.ERROR,\n        DataCommon: null,\n        error: new Error(\"The provided Data Common is not supported\"),\n      });\n      return;\n    }\n\n    setState(initialState);\n\n    (async () => {\n      const manifest = await fetchManifest(DataCommon).catch(() => null);\n      if (!manifest) {\n        setState({\n          status: Status.ERROR,\n          DataCommon: null,\n          error: new Error(`Unable to fetch manifest for ${DataCommon}`),\n        });\n        return;\n      }\n      manifest[\"path\"] = DataCommon;\n      setState({\n        status: Status.LOADED,\n        DataCommon: {\n          ...manifest[\"ui_settings\"],\n          assets: { ...manifest },\n        },\n        error: null,\n      });\n    })();\n  }, [DataCommon]);\n\n  return <Context.Provider value={state}>{children}</Context.Provider>;\n};\n","const filterResetIcon = {\n  src: \"https://raw.githubusercontent.com/CBIIT/datacommons-assets/main/bento/images/icons/svgs/Clear-icon.svg\",\n  alt: \"Reset icon\",\n  size: \"12 px\",\n};\n\n/**\n * Configuration for the facet filter (i.e. the entire DMN)\n */\nexport const baseConfiguration = {\n  // Populated by the useBuildReduxStore hook\n  facetSearchData: null,\n  facetSectionVariables: null,\n  baseFilters: {},\n  filterOptions: [],\n  filterSections: [],\n  // Base configuration that does not change by model\n  resetIcon: filterResetIcon,\n  showCheckboxCount: 6,\n};\n\n/**\n * Base configuration for the graph view\n */\nexport const graphViewConfig = {\n  legend: {},\n  canvas: {\n    fit: {\n      x: 0,\n      y: 20,\n      zoom: 0.7,\n      minZoom: 0.7,\n      maxZoom: 2,\n    },\n  },\n};\n\n/**\n * Fall-back title for the Data Model README popup\n */\nexport const defaultReadMeTitle = \"Understanding the Data Model\";\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation reviewApplication($id: ID!) {\n    reviewApplication(_id: $id) {\n      _id\n      status\n    }\n  }\n`;\n\nexport type Input = {\n  id: string;\n};\n\nexport type Response = {\n  reviewApplication: Pick<Application, \"_id\" | \"status\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation reopenApplication($id: ID!) {\n    reopenApplication(_id: $id) {\n      _id\n      status\n      createdAt\n      updatedAt\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n      }\n      applicant {\n        applicantID\n        applicantName\n      }\n    }\n  }\n`;\n\nexport type Response = {\n  reopenApplication: Pick<\n    Application,\n    \"_id\" | \"status\" | \"createdAt\" | \"updatedAt\" | \"history\" | \"applicant\"\n  >;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation approveApplication(\n    $id: ID!\n    $comment: String\n    $wholeProgram: Boolean\n    $institutions: [String]\n  ) {\n    approveApplication(\n      _id: $id\n      wholeProgram: $wholeProgram\n      comment: $comment\n      institutions: $institutions\n    ) {\n      _id\n    }\n  }\n`;\n\nexport type Input = {\n  id: string;\n  comment: string;\n  wholeProgram: boolean;\n  institutions: string[];\n};\n\nexport type Response = {\n  approveApplication: Pick<Application, \"_id\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation inquireApplication($id: ID!, $comment: String!) {\n    inquireApplication(_id: $id, comment: $comment) {\n      _id\n    }\n  }\n`;\n\nexport type Response = {\n  inquireApplication: Pick<Application, \"_id\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation rejectApplication($id: ID!, $comment: String!) {\n    rejectApplication(_id: $id, comment: $comment) {\n      _id\n    }\n  }\n`;\n\nexport type Response = {\n  rejectApplication: Pick<Application, \"_id\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation saveApplication($application: AppInput!) {\n    saveApplication(application: $application) {\n      _id\n      status\n      createdAt\n      updatedAt\n      submittedDate\n      ORCID\n      openAccess\n      controlledAccess\n      PI\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n      }\n      applicant {\n        applicantID\n        applicantName\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  /**\n   * The Submission Request input\n   */\n  application: {\n    /**\n     * The unique ID of the Application\n     */\n    _id: string;\n    /**\n     * The Study Name of the Application\n     */\n    studyName: string;\n    /**\n     * The Study Abbreviation or Study Name if the abbreviation is null\n     */\n    studyAbbreviation: string;\n    /**\n     * Stringified JSON Application Questionnaire Data\n     *\n     * @see {@link QuestionnaireData}\n     */\n    questionnaireData: string;\n    /**\n     * Whether the data submission will contain controlled access data\n     */\n    controlledAccess: boolean;\n    /**\n     * Whether the data submission will contain open access data\n     */\n    openAccess: boolean;\n    /**\n     * The Open Researcher and Contributor ID\n     */\n    ORCID?: string;\n    /**\n     * Principal Investigator's full name \"<first name> <last name>\"\n     */\n    PI: string;\n    /**\n     * The name for the application program\n     */\n    programName: string;\n    /**\n     * The abbreviation for the application program\n     */\n    programAbbreviation: string;\n    /**\n     * The description for the application program\n     */\n    programDescription: string;\n  };\n};\n\nexport type Response = {\n  saveApplication: Omit<Application, \"programName\" | \"studyAbbreviation\" | \"questionnaireData\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation submitApplication($id: ID!) {\n    submitApplication(_id: $id) {\n      _id\n    }\n  }\n`;\n\nexport type Response = {\n  submitApplication: Pick<Application, \"_id\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getMyLastApplication {\n    getMyLastApplication {\n      _id\n      questionnaireData\n    }\n  }\n`;\n\nexport type Response = {\n  getMyLastApplication: {\n    /**\n     * Unique identifier for the application\n     */\n    _id: Application[\"_id\"];\n    /**\n     * A stringified JSON object containing the Questionnaire data\n     *\n     * @see {@link QuestionnaireData}\n     */\n    questionnaireData: string;\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getApplication($id: ID!) {\n    getApplication(_id: $id) {\n      _id\n      status\n      createdAt\n      updatedAt\n      submittedDate\n      openAccess\n      controlledAccess\n      PI\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n      }\n      applicant {\n        applicantID\n        applicantName\n      }\n      programName\n      studyAbbreviation\n      questionnaireData\n      conditional\n      pendingConditions\n    }\n  }\n`;\n\nexport type Response = {\n  getApplication: Omit<Application, \"questionnaireData\"> & {\n    questionnaireData: string; // Cast to QuestionnaireData\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation updateMyUser($userInfo: UpdateUserInput!) {\n    updateMyUser(userInfo: $userInfo) {\n      firstName\n      lastName\n      userStatus\n      role\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n        dbGaPID\n        controlledAccess\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  userInfo: {\n    firstName: string;\n    lastName: string;\n  };\n};\n\nexport type Response = {\n  updateMyUser: Pick<User, \"firstName\" | \"lastName\" | \"userStatus\" | \"role\"> & {\n    studies: Pick<\n      ApprovedStudy,\n      \"_id\" | \"studyName\" | \"studyAbbreviation\" | \"dbGaPID\" | \"controlledAccess\"\n    >[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listInstitutions {\n    listInstitutions\n  }\n`;\n\nexport type Response = {\n  listInstitutions: string[];\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query retrieveCDEs($cdeInfo: [CDEInput!]!) {\n    retrieveCDEs(CDEInfo: $cdeInfo) {\n      _id\n      CDEFullName\n      CDECode\n      CDEVersion\n      PermissibleValues\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport type Input = {\n  cdeInfo: Pick<CDEInfo, \"CDECode\" | \"CDEVersion\">[];\n};\n\nexport type Response = {\n  retrieveCDEs: {\n    _id: string;\n    CDEFullName: string;\n    CDECode: string;\n    CDEVersion: string;\n    PermissibleValues: string[];\n    createdAt: string;\n    updatedAt: string;\n  }[];\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listApplications($first: Int, $offset: Int, $orderBy: String, $sortDirection: String) {\n    listApplications(\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      applications {\n        _id\n        programName\n        studyAbbreviation\n        status\n        createdAt\n        updatedAt\n        submittedDate\n        applicant {\n          applicantName\n          applicantID\n        }\n        conditional\n        pendingConditions\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  first: number;\n  offset: number;\n  orderBy: string;\n  sortDirection: Order;\n};\n\nexport type Response = {\n  listApplications: {\n    total: number;\n    applications: Omit<Application, \"questionnaireData\">[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation createSubmission(\n    $studyID: String!\n    $dataCommons: String!\n    $name: String!\n    $intention: String!\n    $dataType: String!\n  ) {\n    createSubmission(\n      studyID: $studyID\n      dataCommons: $dataCommons\n      name: $name\n      intention: $intention\n      dataType: $dataType\n    ) {\n      _id\n      status\n      createdAt\n    }\n  }\n`;\n\nexport type Input = {\n  studyID: string;\n  dataCommons: string;\n  name: string;\n  intention: SubmissionIntention;\n  dataType: SubmissionDataType;\n};\n\nexport type Response = {\n  createSubmission: Pick<Submission, \"_id\" | \"status\" | \"createdAt\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getSubmission($id: ID!) {\n    getSubmission(_id: $id) {\n      _id\n      name\n      submitterID\n      submitterName\n      organization {\n        _id\n        name\n      }\n      dataCommons\n      modelVersion\n      studyID\n      studyAbbreviation\n      dbGaPID\n      bucketName\n      rootPath\n      status\n      metadataValidationStatus\n      fileValidationStatus\n      crossSubmissionStatus\n      validationStarted\n      validationEnded\n      validationScope\n      validationType\n      deletingData\n      fileErrors {\n        submissionID\n        type\n        validationType\n        batchID\n        displayID\n        submittedID\n        severity\n        uploadedDate\n        validatedDate\n        errors {\n          title\n          description\n        }\n        warnings {\n          title\n          description\n        }\n      }\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n        userName\n      }\n      conciergeName\n      conciergeEmail\n      intention\n      dataType\n      otherSubmissions\n      nodeCount\n      collaborators {\n        collaboratorID\n        collaboratorName\n        permission\n      }\n      createdAt\n      updatedAt\n    }\n\n    submissionStats(_id: $id) {\n      stats {\n        nodeName\n        total\n        new\n        passed\n        warning\n        error\n      }\n    }\n\n    batchStatusList: listBatches(submissionID: $id, first: -1) {\n      batches {\n        _id\n        status\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  /**\n   * The submission ID\n   */\n  id: string;\n};\n\nexport type Response = {\n  /**\n   * The submission object\n   */\n  getSubmission: Submission;\n  /**\n   * The node statistics for the submission\n   */\n  submissionStats: {\n    stats: SubmissionStatistic[];\n  };\n  /**\n   * The full list of batches for the submission\n   */\n  batchStatusList: {\n    batches: Pick<Batch, \"_id\" | \"status\">[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listSubmissions(\n    $organization: String\n    $status: String\n    $dataCommons: String\n    $name: String\n    $dbGaPID: String\n    $submitterName: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n  ) {\n    listSubmissions(\n      organization: $organization\n      status: $status\n      dataCommons: $dataCommons\n      name: $name\n      dbGaPID: $dbGaPID\n      submitterName: $submitterName\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      submissions {\n        _id\n        name\n        submitterName\n        dataCommons\n        organization {\n          name\n        }\n        studyAbbreviation\n        dbGaPID\n        modelVersion\n        status\n        archived\n        conciergeName\n        nodeCount\n        createdAt\n        updatedAt\n        intention\n      }\n      organizations {\n        _id\n        name\n      }\n      submitterNames\n      dataCommons\n    }\n  }\n`;\n\nexport type Input = {\n  organization?: string;\n  status?: SubmissionStatus | \"All\";\n  dataCommons?: string;\n  name?: string;\n  dbGaPID?: string;\n  submitterName?: string;\n  first: number;\n  offset: number;\n  orderBy: string;\n  sortDirection: Order;\n};\n\nexport type Response = {\n  listSubmissions: {\n    total: number;\n    submissions: Pick<\n      Submission,\n      | \"_id\"\n      | \"name\"\n      | \"submitterName\"\n      | \"dataCommons\"\n      | \"organization\"\n      | \"studyAbbreviation\"\n      | \"dbGaPID\"\n      | \"modelVersion\"\n      | \"status\"\n      | \"archived\"\n      | \"conciergeName\"\n      | \"nodeCount\"\n      | \"createdAt\"\n      | \"updatedAt\"\n      | \"intention\"\n    >[];\n    organizations: Pick<Organization, \"_id\" | \"name\">[];\n    submitterNames: string[];\n    dataCommons: string[];\n  };\n};\n","import gql from \"graphql-tag\";\n// action in [Submit, Release, Withdraw, Reject, Complete, Cancel]\nexport const mutation = gql`\n  mutation submissionAction($submissionID: ID!, $action: String!, $comment: String) {\n    submissionAction(submissionID: $submissionID, action: $action, comment: $comment) {\n      _id\n    }\n  }\n`;\n\nexport type Response = {\n  submissionAction: Pick<Submission, \"_id\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation createBatch($submissionID: ID!, $type: String, $files: [String!]!) {\n    createBatch(submissionID: $submissionID, type: $type, files: $files) {\n      _id\n      submissionID\n      bucketName\n      filePrefix\n      type\n      fileCount\n      files {\n        fileName\n        signedURL\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport type Input = {\n  submissionID: string;\n  type: UploadType;\n  files: string[];\n};\n\nexport type Response = {\n  createBatch: NewBatch;\n};\n","import gql from \"graphql-tag\";\n\n/*\n *   NOTE: This is used to update the Batch after upload to signedURLs has been complete.\n *   This is NOT for upload type \"update\"\n */\nexport const mutation = gql`\n  mutation updateBatch($batchID: ID!, $files: [UploadResult]) {\n    updateBatch(batchID: $batchID, files: $files) {\n      _id\n      submissionID\n      type\n      fileCount\n      files {\n        filePrefix\n        fileName\n        size\n        status\n        errors\n        createdAt\n        updatedAt\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport type Response = {\n  updateBatch: Batch;\n};\n","import gql from \"graphql-tag\";\n\n// The base Batch model used for all listBatches queries\nconst BaseBatchFragment = gql`\n  fragment BaseBatchFragment on Batch {\n    _id\n    displayID\n    createdAt\n    updatedAt\n  }\n`;\n\n// The extended batch model which includes all fields\nconst FullBatchFragment = gql`\n  fragment BatchFragment on Batch {\n    submissionID\n    type\n    fileCount\n    files {\n      nodeType\n      filePrefix\n      fileName\n      status\n      errors\n      createdAt\n      updatedAt\n    }\n    submitterName\n    status\n    errors\n  }\n`;\n\nexport const query = gql`\n  query listBatches(\n    $submissionID: ID!\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    listBatches(\n      submissionID: $submissionID\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      batches {\n        ...BaseBatchFragment\n        ...BatchFragment @skip(if: $partial)\n      }\n    }\n    batchStatusList: listBatches(submissionID: $submissionID, first: -1) {\n      batches {\n        _id\n        status\n      }\n    }\n  }\n  ${FullBatchFragment}\n  ${BaseBatchFragment}\n`;\n\nexport type Input = {\n  submissionID: string;\n  first?: number;\n  offset?: number;\n  orderBy?: keyof Batch;\n  sortDirection?: string;\n  partial?: boolean;\n};\n\nexport type Response<IsPartial = false> = {\n  listBatches: {\n    total: number;\n    batches: (IsPartial extends true\n      ? Pick<Batch, \"_id\" | \"displayID\" | \"createdAt\" | \"updatedAt\">\n      : Omit<Batch, \"submitterID\">)[];\n  };\n  batchStatusList: {\n    batches: Pick<Batch, \"_id\" | \"status\">[];\n  };\n};\n","import gql from \"graphql-tag\";\n\n// The base QCResult model used for all submissionQCResults queries\nconst BaseQCResultFragment = gql`\n  fragment BaseQCResultFragment on QCResult {\n    errors {\n      title\n      description\n    }\n  }\n`;\n\n// The extended QCResult model which includes all fields\nconst FullQCResultFragment = gql`\n  fragment QCResultFragment on QCResult {\n    submissionID\n    type\n    validationType\n    batchID\n    displayID\n    submittedID\n    severity\n    uploadedDate\n    validatedDate\n    errors {\n      title\n      description\n    }\n    warnings {\n      title\n      description\n    }\n  }\n`;\n\nexport const query = gql`\n  query submissionQCResults(\n    $id: ID!\n    $issueCode: String\n    $nodeTypes: [String]\n    $batchIDs: [ID]\n    $severities: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    submissionQCResults(\n      _id: $id\n      issueCode: $issueCode\n      nodeTypes: $nodeTypes\n      batchIDs: $batchIDs\n      severities: $severities\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      results {\n        ...BaseQCResultFragment\n        ...QCResultFragment @skip(if: $partial)\n      }\n    }\n  }\n  ${FullQCResultFragment}\n  ${BaseQCResultFragment}\n`;\n\nexport type Input = {\n  id: string;\n  issueCode?: string;\n  nodeTypes?: string[];\n  batchIDs?: number[];\n  severities?: string;\n  first?: number;\n  offset?: number;\n  orderBy?: string;\n  sortDirection?: string;\n  partial?: boolean;\n};\n\nexport type Response<IsPartial = false> = {\n  submissionQCResults: ValidationResult<\n    IsPartial extends true ? Pick<QCResult, \"errors\"> : QCResult\n  >;\n};\n","import gql from \"graphql-tag\";\n\n// The base aggregatedQCResult model used for all aggregatedSubmissionQCResults queries\nconst BaseAggregatedQCResultFragment = gql`\n  fragment BaseAggregatedQCResultFragment on aggregatedQCResult {\n    code\n    title\n  }\n`;\n\n// The extended aggregatedQCResult model which includes all fields\nconst FullAggregatedQCResultFragment = gql`\n  fragment AggregatedQCResultFragment on aggregatedQCResult {\n    severity\n    count\n  }\n`;\n\nexport const query = gql`\n  query aggregatedSubmissionQCResults(\n    $submissionID: ID!\n    $severity: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    aggregatedSubmissionQCResults(\n      submissionID: $submissionID\n      severity: $severity\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      results {\n        ...BaseAggregatedQCResultFragment\n        ...AggregatedQCResultFragment @skip(if: $partial)\n      }\n    }\n  }\n  ${FullAggregatedQCResultFragment}\n  ${BaseAggregatedQCResultFragment}\n`;\n\nexport type Input = {\n  submissionID: string;\n  severity?: string;\n  first?: number;\n  offset?: number;\n  orderBy?: string;\n  sortDirection?: string;\n  partial?: boolean;\n};\n\nexport type Response = {\n  aggregatedSubmissionQCResults: ValidationResult<AggregatedQCResult>;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query submissionCrossValidationResults(\n    $submissionID: ID!\n    $nodeTypes: [String]\n    $batchIDs: [ID]\n    $severities: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n  ) {\n    submissionCrossValidationResults(\n      submissionID: $submissionID\n      nodeTypes: $nodeTypes\n      batchIDs: $batchIDs\n      severities: $severities\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      results {\n        submissionID\n        type\n        validationType\n        batchID\n        displayID\n        submittedID\n        severity\n        uploadedDate\n        validatedDate\n        errors {\n          title\n          description\n        }\n        warnings {\n          title\n          description\n        }\n        conflictingSubmission\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  submissionID: string;\n  nodeTypes?: string[];\n  batchIDs?: string[];\n  severities?: string;\n  first?: number;\n  offset?: number;\n  orderBy?: keyof CrossValidationResult;\n  sortDirection?: string;\n};\n\nexport type Response = {\n  submissionCrossValidationResults: ValidationResult<CrossValidationResult>;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation validateSubmission($_id: ID!, $types: [String], $scope: String) {\n    validateSubmission(_id: $_id, types: $types, scope: $scope) {\n      success\n    }\n  }\n`;\n\nexport type Input = {\n  _id: string;\n  types?: ValidationType[];\n  scope?: ValidationTarget;\n};\n\nexport type Response = {\n  validateSubmission: Pick<AsyncProcessResult, \"success\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listSubmissionNodeTypes($_id: ID!) {\n    listSubmissionNodeTypes(_id: $_id)\n  }\n`;\n\nexport type Input = {\n  _id: string;\n};\n\nexport type Response = {\n  listSubmissionNodeTypes: string[];\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getNodeDetail($submissionID: String!, $nodeType: String!, $nodeID: String!) {\n    getNodeDetail(submissionID: $submissionID, nodeType: $nodeType, nodeID: $nodeID) {\n      parents {\n        nodeType\n        total\n      }\n      children {\n        nodeType\n        total\n      }\n      IDPropName\n    }\n  }\n`;\n\nexport type Input = {\n  submissionID: string;\n  nodeType: string;\n  nodeID: string;\n};\n\nexport type Response = {\n  getNodeDetail: Pick<NodeDetailResult, \"parents\" | \"children\" | \"IDPropName\">;\n};\n","import gql from \"graphql-tag\";\n\nconst RelatedNodeFragment = gql`\n  fragment RelatedNodeFragment on Node {\n    nodeType\n    nodeID\n    status\n    props\n  }\n`;\nexport const query = gql`\n  query getRelatedNodes(\n    $submissionID: String!\n    $nodeType: String!\n    $nodeID: String!\n    $relationship: String!\n    $relatedNodeType: String!\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $propertiesOnly: Boolean = false\n  ) {\n    getRelatedNodes(\n      submissionID: $submissionID\n      nodeType: $nodeType\n      nodeID: $nodeID\n      relationship: $relationship\n      relatedNodeType: $relatedNodeType\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total @skip(if: $propertiesOnly)\n      properties @include(if: $propertiesOnly)\n      IDPropName @include(if: $propertiesOnly)\n      nodes {\n        ...RelatedNodeFragment @skip(if: $propertiesOnly)\n      }\n    }\n  }\n  ${RelatedNodeFragment}\n`;\n\nexport type Input = {\n  submissionID: string;\n  nodeType: string;\n  nodeID: string;\n  relationship: NodeRelationship;\n  relatedNodeType: string;\n  first?: number;\n  offset?: number;\n  orderBy?: string;\n  sortDirection?: string;\n  propertiesOnly?: boolean;\n};\n\nexport type PropertiesOnlyResponse = {\n  getRelatedNodes: Pick<RelatedNodes, \"properties\" | \"IDPropName\">;\n};\n\nexport type Response = {\n  getRelatedNodes: Pick<RelatedNodes, \"nodes\" | \"total\">;\n};\n","import gql from \"graphql-tag\";\n\nconst SubmissionNodeFragment = gql`\n  fragment SubmissionNodeFragment on Node {\n    nodeType\n    status\n    props\n  }\n`;\n\nexport const query = gql`\n  query getSubmissionNodes(\n    $_id: String!\n    $nodeType: String!\n    $status: String\n    $submittedID: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    getSubmissionNodes(\n      submissionID: $_id\n      nodeType: $nodeType\n      status: $status\n      nodeID: $submittedID\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      IDPropName @skip(if: $partial)\n      properties @skip(if: $partial)\n      nodes {\n        nodeID\n        ...SubmissionNodeFragment @skip(if: $partial)\n      }\n    }\n  }\n  ${SubmissionNodeFragment}\n`;\n\nexport type Input = {\n  /**\n   * The `_id` of the Data Submission\n   */\n  _id: string;\n  /**\n   * The type of node to query for\n   */\n  nodeType: string;\n  /**\n   * Status filter for the current validation status of the node\n   */\n  status: \"All\" | ValidationStatus;\n  /**\n   * Optional fuzzy-filter for the submitted Node ID\n   */\n  submittedID?: string;\n  first?: number;\n  offset?: number;\n  orderBy?: string;\n  sortDirection?: string;\n  /**\n   * If true, only return the `total`, and `nodes.nodeID` fields\n   * will be returned.\n   */\n  partial?: boolean;\n};\n\nexport type Response =\n  | {\n      getSubmissionNodes: {\n        /**\n         * Total number of nodes in the submission.\n         */\n        total: number;\n        /**\n         * The ID/Key property of current node.\n         *\n         */\n        IDPropName: string;\n        /**\n         * The list of all node properties including parents\n         */\n        properties: string[];\n        /**\n         * An array of nodes matching the queried node type\n         *\n         * @note Unused values are omitted from the query. See the type definition for additional fields.\n         */\n        nodes: Pick<SubmissionNode, \"nodeType\" | \"nodeID\" | \"props\" | \"status\">[];\n      };\n    }\n  | {\n      getSubmissionNodes: {\n        total: number;\n        nodes: Pick<SubmissionNode, \"nodeID\">[];\n      };\n    };\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query submissionStats($id: ID!) {\n    submissionStats(_id: $id) {\n      stats {\n        nodeName\n        total\n        new\n        passed\n        warning\n        error\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  /**\n   * The ID of the submission to get statistics for\n   */\n  id: string;\n};\n\nexport type Response = {\n  /**\n   * The node statistics for the submission\n   */\n  submissionStats: {\n    stats: SubmissionStatistic[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation deleteDataRecords($_id: String!, $nodeType: String!, $nodeIds: [String!]) {\n    deleteDataRecords(submissionID: $_id, nodeType: $nodeType, nodeIDs: $nodeIds) {\n      success\n      message\n    }\n  }\n`;\n\nexport type Input = {\n  /**\n   * The ID of the data submission to delete the records from\n   */\n  _id: string;\n  /**\n   * The type of node to delete\n   */\n  nodeType: string;\n  /**\n   * An array of the IDs of the nodes to delete\n   */\n  nodeIds: string[];\n};\n\nexport type Response = {\n  deleteDataRecords: AsyncProcessResult;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query retrieveCLIConfig($_id: String!, $apiURL: String!, $dataFolder: String, $manifest: String) {\n    retrieveCLIConfig(\n      submissionID: $_id\n      apiURL: $apiURL\n      dataFolder: $dataFolder\n      manifest: $manifest\n    )\n  }\n`;\n\nexport type Response = {\n  /**\n   * A string containing the Uploader CLI file config pre-filled template\n   */\n  retrieveCLIConfig: string;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listPotentialCollaborators($submissionID: String!) {\n    listPotentialCollaborators(submissionID: $submissionID) {\n      _id\n      firstName\n      lastName\n    }\n  }\n`;\n\nexport type Input = {\n  submissionID: string;\n};\n\nexport type Response = {\n  listPotentialCollaborators: Pick<User, \"_id\" | \"firstName\" | \"lastName\">[];\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation editSubmissionCollaborators($submissionID: ID!, $collaborators: [CollaboratorInput]) {\n    editSubmissionCollaborators(submissionID: $submissionID, collaborators: $collaborators) {\n      _id\n      collaborators {\n        collaboratorID\n        collaboratorName\n        permission\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  submissionID: string;\n  collaborators: CollaboratorInput[];\n};\n\nexport type Response = {\n  editSubmissionCollaborators: Pick<Submission, \"_id\" | \"collaborators\">;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getUser($userID: ID!) {\n    getUser(userID: $userID) {\n      _id\n      firstName\n      lastName\n      userStatus\n      role\n      IDP\n      email\n      createdAt\n      updateAt\n      dataCommons\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      permissions\n      notifications\n    }\n  }\n`;\n\nexport type Input = {\n  userID: string;\n};\n\nexport type Response = {\n  getUser: User & {\n    studies: Pick<ApprovedStudy, \"_id\" | \"studyName\" | \"studyAbbreviation\">[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listUsers {\n    listUsers {\n      _id\n      firstName\n      lastName\n      IDP\n      email\n      userStatus\n      role\n    }\n  }\n`;\n\nexport type Response = {\n  listUsers: Pick<\n    User,\n    \"_id\" | \"firstName\" | \"lastName\" | \"IDP\" | \"email\" | \"userStatus\" | \"role\"\n  >[];\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation editUser(\n    $userID: ID!\n    $userStatus: String\n    $role: String\n    $studies: [String]\n    $dataCommons: [String]\n    $permissions: [String]\n    $notifications: [String]\n  ) {\n    editUser(\n      userID: $userID\n      status: $userStatus\n      role: $role\n      studies: $studies\n      dataCommons: $dataCommons\n      permissions: $permissions\n      notifications: $notifications\n    ) {\n      userStatus\n      role\n      dataCommons\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n        dbGaPID\n        controlledAccess\n      }\n      permissions\n      notifications\n    }\n  }\n`;\n\nexport type Input = {\n  /**\n   * The UUIDv4 identifier of the user account\n   */\n  userID: User[\"_id\"];\n  /**\n   * An array of studyIDs to assign to the user\n   */\n  studies: string[];\n} & Pick<User, \"userStatus\" | \"role\" | \"dataCommons\" | \"permissions\" | \"notifications\">;\n\nexport type Response = {\n  editUser: Pick<User, \"userStatus\" | \"role\" | \"dataCommons\" | \"permissions\" | \"notifications\"> & {\n    studies: Pick<\n      ApprovedStudy,\n      \"_id\" | \"studyName\" | \"studyAbbreviation\" | \"dbGaPID\" | \"controlledAccess\"\n    >[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation requestAccess($role: String!, $studies: [String]!, $additionalInfo: String) {\n    requestAccess(role: $role, studies: $studies, additionalInfo: $additionalInfo) {\n      success\n      message\n    }\n  }\n`;\n\nexport type Input = {\n  /**\n   * The role the user is requesting access for.\n   */\n  role: UserRole;\n  /**\n   * The list of approved study ID's the user is requesting access for.\n   */\n  studies: string[];\n  /**\n   * Any additional contextual information the user wants to provide.\n   */\n  additionalInfo?: string;\n};\n\nexport type Response = {\n  requestAccess: AsyncProcessResult;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query retrievePBACDefaults($roles: [String!]!) {\n    retrievePBACDefaults(roles: $roles) {\n      role\n      permissions {\n        _id\n        group\n        name\n        order\n        checked\n        disabled\n      }\n      notifications {\n        _id\n        group\n        name\n        order\n        checked\n        disabled\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  roles: Array<UserRole | \"All\">;\n};\n\nexport type Response = {\n  retrievePBACDefaults: Array<{\n    /**\n     * The role that the defaults apply to.\n     */\n    role: UserRole;\n    /**\n     * The default permissions for the role.\n     */\n    permissions: PBACDefault<AuthPermissions>[];\n    /**\n     * The default notifications for the role.\n     */\n    notifications: PBACDefault<AuthNotifications>[];\n  }>;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listOrganizations {\n    listOrganizations {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeName\n      studies {\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n  }\n`;\n\nexport type Response = {\n  listOrganizations: Array<\n    Pick<\n      Organization,\n      | \"_id\"\n      | \"name\"\n      | \"abbreviation\"\n      | \"description\"\n      | \"status\"\n      | \"conciergeName\"\n      | \"createdAt\"\n      | \"updateAt\"\n    > & {\n      studies: Pick<Organization[\"studies\"][number], \"studyName\" | \"studyAbbreviation\">[];\n    }\n  >;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getOrganizationData($orgID: ID!, $organization: String) {\n    getOrganization(orgID: $orgID) {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeID\n      conciergeName\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n    listSubmissions(\n      first: -1\n      offset: 0\n      orderBy: \"updatedAt\"\n      sortDirection: \"ASC\"\n      organization: $organization\n      status: \"All\"\n    ) {\n      submissions {\n        _id\n        studyAbbreviation\n        status\n      }\n    }\n  }\n`;\n\nexport type Response = {\n  /**\n   * The organization that was requested\n   */\n  getOrganization: Organization;\n  /**\n   * Data Submissions for the organization\n   */\n  listSubmissions: {\n    submissions: Pick<Submission, \"_id\" | \"status\" | \"studyAbbreviation\">[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation editOrganization(\n    $orgID: ID!\n    $name: String\n    $abbreviation: String\n    $description: String\n    $conciergeID: String\n    $studies: [ApprovedStudyInput]\n    $status: String\n  ) {\n    editOrganization(\n      orgID: $orgID\n      name: $name\n      abbreviation: $abbreviation\n      description: $description\n      conciergeID: $conciergeID\n      studies: $studies\n      status: $status\n    ) {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeID\n      conciergeName\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n  }\n`;\n\nexport type Input = {\n  orgID: string;\n  name: string;\n  abbreviation: string;\n  description: string;\n  conciergeID: string;\n  studies: { studyID: string }[];\n  status: Organization[\"status\"];\n};\n\nexport type Response = {\n  editOrganization: Organization;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listActiveCurators {\n    listActiveCurators {\n      userID\n      firstName\n      lastName\n      createdAt\n      updateAt\n    }\n  }\n`;\n\nexport type Response = {\n  listActiveCurators: (Pick<User, \"firstName\" | \"lastName\" | \"createdAt\" | \"updateAt\"> & {\n    userID: User[\"_id\"];\n  })[];\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query listApprovedStudies(\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $dbGaPID: String\n    $controlledAccess: String\n    $study: String\n  ) {\n    listApprovedStudies(\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n      dbGaPID: $dbGaPID\n      controlledAccess: $controlledAccess\n      study: $study\n    ) {\n      total\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n        dbGaPID\n        controlledAccess\n        openAccess\n        PI\n        ORCID\n        createdAt\n      }\n    }\n  }\n`;\n\nexport type Input = {\n  first?: number;\n  offset?: number;\n  orderBy?: string;\n  sortDirection?: Order;\n  dbGaPID?: string;\n  controlledAccess?: AccessType;\n  openAccess?: boolean;\n  study?: string;\n};\n\nexport type Response = {\n  listApprovedStudies: {\n    total: number;\n    studies: ApprovedStudy[];\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation createApprovedStudy(\n    $name: String!\n    $acronym: String\n    $controlledAccess: Boolean!\n    $openAccess: Boolean\n    $dbGaPID: String\n    $ORCID: String\n    $PI: String\n  ) {\n    createApprovedStudy(\n      name: $name\n      acronym: $acronym\n      controlledAccess: $controlledAccess\n      openAccess: $openAccess\n      dbGaPID: $dbGaPID\n      ORCID: $ORCID\n      PI: $PI\n    ) {\n      _id\n      studyName\n      studyAbbreviation\n      dbGaPID\n      controlledAccess\n      openAccess\n      PI\n      ORCID\n      createdAt\n    }\n  }\n`;\n\nexport type Input = {\n  name: string;\n  acronym: string;\n  controlledAccess: boolean;\n  openAccess: boolean;\n  dbGaPID: string;\n  ORCID: string;\n  PI: string;\n};\n\nexport type Response = {\n  createApprovedStudy: ApprovedStudy;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation updateApprovedStudy(\n    $studyID: ID!\n    $name: String!\n    $acronym: String\n    $controlledAccess: Boolean!\n    $openAccess: Boolean\n    $dbGaPID: String\n    $ORCID: String\n    $PI: String\n  ) {\n    updateApprovedStudy(\n      studyID: $studyID\n      name: $name\n      acronym: $acronym\n      controlledAccess: $controlledAccess\n      openAccess: $openAccess\n      dbGaPID: $dbGaPID\n      ORCID: $ORCID\n      PI: $PI\n    ) {\n      _id\n      studyName\n      studyAbbreviation\n      dbGaPID\n      controlledAccess\n      openAccess\n      PI\n      ORCID\n      createdAt\n    }\n  }\n`;\n\nexport type Input = {\n  studyID: string;\n  name: string;\n  acronym: string;\n  controlledAccess: boolean;\n  openAccess: boolean;\n  dbGaPID: string;\n  ORCID: string;\n  PI: string;\n};\n\nexport type Response = {\n  updateApprovedStudy: ApprovedStudy;\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getApprovedStudy($_id: ID!) {\n    getApprovedStudy(_id: $_id) {\n      _id\n      studyName\n      studyAbbreviation\n      dbGaPID\n      controlledAccess\n      openAccess\n      PI\n      ORCID\n      createdAt\n    }\n  }\n`;\n\nexport type Input = {\n  _id: string;\n};\n\nexport type Response = {\n  getApprovedStudy: ApprovedStudy;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation createOrganization(\n    $name: String!\n    $abbreviation: String!\n    $description: String\n    $conciergeID: String\n    $studies: [ApprovedStudyInput]\n  ) {\n    createOrganization(\n      name: $name\n      abbreviation: $abbreviation\n      description: $description\n      conciergeID: $conciergeID\n      studies: $studies\n    ) {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeID\n      conciergeName\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n  }\n`;\n\nexport type Input = {\n  name: string;\n  abbreviation: string;\n  description: string;\n  conciergeID: string;\n  studies: { studyID: string }[];\n};\n\nexport type Response = {\n  createOrganization: Organization;\n};\n","import gql from \"graphql-tag\";\n\nexport const mutation = gql`\n  mutation {\n    grantToken {\n      tokens\n      message\n    }\n  }\n`;\n\nexport type Response = {\n  grantToken: {\n    tokens: string[];\n    message: string;\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const query = gql`\n  query getDashboardURL($type: String!) {\n    getDashboardURL(type: $type) {\n      url\n    }\n  }\n`;\n\nexport type Input = {\n  type: string;\n};\n\nexport type Response = {\n  getDashboardURL: {\n    url: string;\n  };\n};\n","import { useState } from \"react\";\nimport { createStore, combineReducers, Store } from \"redux\";\nimport {\n  ddgraph,\n  moduleReducers as submission,\n  versionInfo,\n  getModelExploreData,\n} from \"data-model-navigator\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { defaultTo } from \"lodash\";\nimport { baseConfiguration, defaultReadMeTitle, graphViewConfig } from \"../config/ModelNavigator\";\nimport {\n  buildAssetUrls,\n  buildBaseFilterContainers,\n  buildFilterOptionsList,\n  updateEnums,\n  Logger,\n} from \"../utils\";\nimport { RETRIEVE_CDEs, RetrieveCDEsInput, RetrieveCDEsResp } from \"../graphql\";\n\nexport type ReduxStoreStatus = \"waiting\" | \"loading\" | \"error\" | \"success\";\n\nexport type ReduxStoreResult = [\n  { status: ReduxStoreStatus; store: Store },\n  () => void,\n  (assets: DataCommon) => void,\n];\n\nconst makeStore = (): Store => {\n  const reducers = { ddgraph, versionInfo, submission };\n  const newStore = createStore(combineReducers(reducers));\n\n  // @ts-ignore\n  newStore.injectReducer = (key, reducer) => {\n    reducers[key] = reducer;\n    newStore.replaceReducer(combineReducers(reducers));\n  };\n\n  return newStore;\n};\n\n/**\n * A hook to build and populate the Redux store with DMN data\n *\n * @params {void}\n */\nconst useBuildReduxStore = (): ReduxStoreResult => {\n  const [status, setStatus] = useState<ReduxStoreStatus>(\"waiting\");\n  const [store, setStore] = useState<Store>(makeStore());\n\n  const [retrieveCDEs, { error: retrieveCDEsError }] = useLazyQuery<\n    RetrieveCDEsResp,\n    RetrieveCDEsInput\n  >(RETRIEVE_CDEs, {\n    context: { clientName: \"backend\" },\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  /**\n   * Rebuilds the store from scratch\n   *\n   * @params {void}\n   */\n  const resetStore = () => {\n    setStatus(\"loading\");\n    setStore(makeStore());\n  };\n\n  /**\n   * Injects the Data Model into the store\n   *\n   * @param datacommon The Data Model to inject assets from\n   */\n  const populateStore = async (datacommon: DataCommon) => {\n    if (\n      !datacommon?.name ||\n      !datacommon?.assets ||\n      !datacommon?.assets[\"path\"] ||\n      !datacommon.configuration?.pdfConfig\n    ) {\n      setStatus(\"error\");\n      return;\n    }\n\n    setStatus(\"loading\");\n\n    const assets = buildAssetUrls(datacommon);\n    const response = await getModelExploreData(...assets.model_files)?.catch((e) => {\n      Logger.error(e);\n      return null;\n    });\n    if (!response?.data || !response?.version) {\n      setStatus(\"error\");\n      return;\n    }\n\n    let dictionary;\n    const { cdeMap, data: dataList } = response;\n\n    if (cdeMap) {\n      const cdeInfo: CDEInfo[] = Array.from(response.cdeMap.values());\n      try {\n        const CDEs = await retrieveCDEs({\n          variables: {\n            cdeInfo: cdeInfo.map(({ CDECode, CDEVersion }) => ({ CDECode, CDEVersion })),\n          },\n        });\n\n        if (retrieveCDEsError) {\n          dictionary = updateEnums(cdeMap, dataList, [], true);\n        } else {\n          const retrievedCDEs = defaultTo(CDEs.data.retrieveCDEs, []);\n          dictionary = updateEnums(cdeMap, dataList, retrievedCDEs);\n        }\n      } catch (error) {\n        dictionary = updateEnums(cdeMap, dataList, [], true);\n      }\n    } else {\n      dictionary = dataList;\n    }\n\n    store.dispatch({ type: \"RECEIVE_VERSION_INFO\", data: response.version });\n\n    store.dispatch({\n      type: \"REACT_FLOW_GRAPH_DICTIONARY\",\n      dictionary,\n      pdfDownloadConfig: datacommon.configuration.pdfConfig,\n      graphViewConfig,\n    });\n\n    store.dispatch({\n      type: \"RECEIVE_DICTIONARY\",\n      payload: {\n        data: dictionary,\n        facetfilterConfig: {\n          ...baseConfiguration,\n          facetSearchData: datacommon.configuration.facetFilterSearchData,\n          facetSectionVariables: datacommon.configuration.facetFilterSectionVariables,\n          baseFilters: buildBaseFilterContainers(datacommon),\n          filterSections: datacommon.configuration.facetFilterSearchData.map((s) => s?.datafield),\n          filterOptions: buildFilterOptionsList(datacommon),\n        },\n        pageConfig: {\n          title: datacommon.configuration.pageTitle,\n          iconSrc: assets.navigator_icon,\n        },\n        readMeConfig: {\n          readMeUrl: assets.readme,\n          readMeTitle: datacommon.configuration?.readMeTitle || defaultReadMeTitle,\n          allowDownload: false,\n        },\n        pdfDownloadConfig: datacommon.configuration.pdfConfig,\n        loadingExampleConfig: {\n          type: \"static\",\n          url: assets.loading_file,\n        },\n        graphViewConfig,\n      },\n    });\n\n    // MVP-2 M2 NOTE: This resets the search history to prevent the data models\n    // from overlapping on searches. A future improvement would be to isolate\n    // the localStorage history key to the data model based on a config option.\n    store.dispatch({ type: \"SEARCH_CLEAR_HISTORY\" });\n\n    setStatus(\"success\");\n  };\n\n  return [{ status, store }, resetStore, populateStore];\n};\n\nexport default useBuildReduxStore;\n","import React, { FC } from \"react\";\nimport { Box } from \"@mui/material\";\n// eslint-disable-next-line import/no-extraneous-dependencies -- Required to use legacy version from DMN\nimport { Provider } from \"react-redux\";\nimport { ReduxDataDictionary } from \"data-model-navigator\";\nimport SuspenseLoader from \"../../components/SuspenseLoader\";\nimport { Status, useDataCommonContext } from \"../../components/Contexts/DataCommonContext\";\nimport useBuildReduxStore from \"../../hooks/useBuildReduxStore\";\n\n/**\n * Encapsulates the Data Model Navigator component\n *\n * This component handles the following:\n * - Loading the Data Common assets\n * - Building the Redux store for the Data Model Navigator\n * - Rendering the Data Model Navigator\n *\n * @returns {JSX.Element}\n */\nconst ModelNavigator: FC = () => {\n  const { status, DataCommon } = useDataCommonContext();\n  const [{ status: buildStatus, store }, , populate] = useBuildReduxStore();\n\n  if (status === Status.LOADING || buildStatus === \"loading\") {\n    return <SuspenseLoader />;\n  }\n\n  if (status === Status.LOADED && buildStatus === \"waiting\") {\n    populate(DataCommon);\n    return <SuspenseLoader />;\n  }\n\n  if (!DataCommon || status === Status.ERROR || buildStatus === \"error\") {\n    throw new Error(\"Unable to build Model Navigator for the selected Data Common\");\n  }\n\n  return (\n    <Box sx={{ mt: \"40px\" }}>\n      <Provider store={store}>\n        <ReduxDataDictionary pdfDownloadConfig={DataCommon.configuration?.pdfConfig} />\n      </Provider>\n    </Box>\n  );\n};\n\nexport default ModelNavigator;\n","import React, { Component } from \"react\";\nimport { Alert } from \"@mui/material\";\n\ntype Props = {\n  /**\n   * The error message to display if an error occurs.\n   *\n   * @default \"Error loading component.\"\n   */\n  errorMessage?: string;\n  /**\n   * The children to render.\n   */\n  children: React.ReactNode;\n};\n\ntype State = {\n  /**\n   * Whether an error has occurred in the children.\n   * Displays `errorMessage` if true.\n   *\n   * @default false\n   */\n  hasError: boolean;\n};\n\n/**\n * A error boundary component that catches errors in its children\n * and displays a fallback UI.\n *\n * @param children Component Children\n * @param [errorMessage] The error message to display.\n * @returns The error boundary component\n */\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  render() {\n    const { children, errorMessage } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <Alert sx={{ m: 3, p: 2 }} severity=\"error\" data-testid=\"error-boundary-alert\">\n          {errorMessage || \"Error loading component.\"}\n        </Alert>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport NavigatorView from \"./NavigatorView\";\nimport ErrorBoundary from \"../../components/ErrorBoundary\";\nimport { DataCommonProvider } from \"../../components/Contexts/DataCommonContext\";\nimport usePageTitle from \"../../hooks/usePageTitle\";\n\nconst ModelNavigatorController: React.FC = () => {\n  usePageTitle(\"Model Navigator\");\n\n  // Custom hook to parse query parameters\n  const useQuery = () => new URLSearchParams(useLocation().search);\n\n  const query = useQuery();\n  const defaultConfig =\n    \"https://raw.githubusercontent.com/jonkiky/crdc-data-model-navigator/refs/heads/data/ctdc\";\n  const config = query.get(\"config\") || defaultConfig; // Fallback to defaultConfig if `config` is not present\n\n  return (\n    <DataCommonProvider key={config} DataCommon={config}>\n      <ErrorBoundary errorMessage=\"Unable to load the Model Navigator for the requested model\">\n        <NavigatorView />\n      </ErrorBoundary>\n    </DataCommonProvider>\n  );\n};\n\nexport default ModelNavigatorController;\n","import { useEffect } from \"react\";\n\n/**\n * A hook to set and restore the page title\n *\n * @param title The new title to set\n * @param [restore] Restore the title on unmount\n */\nconst usePageTitle = (title: string, restore = true): void => {\n  // Update title on mount\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  // Revert on unmount if requested\n  useEffect(() => {\n    if (!restore) {\n      return () => {};\n    }\n\n    return () => {\n      document.title = \"CRDC Submission Portal\";\n    };\n  }, []);\n};\n\nexport default usePageTitle;\n"],"names":["Status","initialState","status","LOADING","DataCommon","error","Context","createContext","displayName","DataCommonProvider","_ref","children","state","setState","useState","useEffect","manifest","fetchManifest","catch","LOADED","assets","ERROR","Error","concat","_jsx","Provider","value","baseConfiguration","facetSearchData","facetSectionVariables","baseFilters","filterOptions","filterSections","resetIcon","src","alt","size","showCheckboxCount","graphViewConfig","legend","canvas","fit","x","y","zoom","minZoom","maxZoom","gql","_templateObject","_taggedTemplateLiteral","query","BaseBatchFragment","FullBatchFragment","_templateObject2","_templateObject3","BaseQCResultFragment","FullQCResultFragment","BaseAggregatedQCResultFragment","FullAggregatedQCResultFragment","RelatedNodeFragment","SubmissionNodeFragment","makeStore","reducers","ddgraph","versionInfo","submission","newStore","createStore","combineReducers","injectReducer","key","reducer","replaceReducer","useBuildReduxStore","setStatus","store","setStore","retrieveCDEs","retrieveCDEsError","useLazyQuery","RETRIEVE_CDEs","context","clientName","fetchPolicy","resetStore","async","_datacommon$configura","_getModelExploreData","_datacommon$configura2","datacommon","name","configuration","pdfConfig","buildAssetUrls","response","getModelExploreData","model_files","e","Logger","data","version","dictionary","cdeMap","dataList","cdeInfo","Array","from","values","CDEs","variables","map","CDECode","CDEVersion","updateEnums","retrievedCDEs","defaultTo","dispatch","type","pdfDownloadConfig","payload","facetfilterConfig","facetFilterSearchData","facetFilterSectionVariables","buildBaseFilterContainers","s","datafield","buildFilterOptionsList","pageConfig","title","pageTitle","iconSrc","navigator_icon","readMeConfig","readMeUrl","readme","readMeTitle","allowDownload","loadingExampleConfig","url","loading_file","ModelNavigator","_DataCommon$configura","useDataCommonContext","useContext","buildStatus","populate","SuspenseLoader","Box","sx","mt","ReduxDataDictionary","ErrorBoundary","Component","constructor","props","super","this","hasError","static","render","errorMessage","Alert","m","p","severity","ModelNavigatorController","usePageTitle","config","URLSearchParams","useLocation","search","get","NavigatorView","restore","arguments","length","undefined","document"],"sourceRoot":""}