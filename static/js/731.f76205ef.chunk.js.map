{"version":3,"file":"static/js/731.f76205ef.chunk.js","mappings":"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","sources":["utils/logger.ts","utils/dataModelUtils.ts","components/Contexts/DataCommonContext.tsx","config/ModelNavigator.ts","hooks/useBuildReduxStore.ts","content/modelNavigator/NavigatorView.tsx","components/ErrorBoundary/index.tsx","content/modelNavigator/Controller.tsx","hooks/usePageTitle.ts"],"sourcesContent":["import env from \"../env\";\n\n/**\n * Represents the different log levels that can be used.\n *\n * @note Currently only supports \"error\" levels.\n */\nexport type LogLevel = \"error\";\n\n/**\n * A simple wrapper for the `console.log` function.\n *\n * @note Do not use this function directly. Use the `Logger` object instead.\n * @param level The log level to use.\n * @param message The message to log to the console.\n * @param optionalParams Any additional parameters to log with the message.\n * @returns void\n */\nconst LoggingWrapper = (level: LogLevel, message: string, ...optionalParams: unknown[]): void => {\n  // Skip logging in a testing context.\n  if (env?.NODE_ENV === \"test\") {\n    return;\n  }\n\n  // Skip logging on stage or production environments.\n  if (env?.REACT_APP_DEV_TIER === \"prod\" || env?.REACT_APP_DEV_TIER === \"stage\") {\n    return;\n  }\n\n  const timestamp = new Date().toISOString();\n  switch (level) {\n    case \"error\":\n      // eslint-disable-next-line no-console\n      console.error(`[ERROR] [${timestamp}] ${message}`, ...optionalParams);\n      break;\n  }\n};\n\n/**\n * Represents the definition of a logger function.\n */\nexport type LoggerFunction = (message: string, ...optionalParams: unknown[]) => void;\n\n/**\n * Provides a simple logging interface for the application.\n */\nexport const Logger: Readonly<Record<LogLevel, LoggerFunction>> = {\n  /**\n   * A simple error logging function.\n   *\n   * @see {@link LoggingWrapper} for more information.\n   */\n  error: (message: string, ...optionalParams: unknown[]) =>\n    LoggingWrapper(\"error\", message, ...optionalParams),\n};\n","import { defaultTo } from \"lodash\";\nimport { RetrieveCDEsResp } from \"../graphql\";\nimport GenericModelLogo from \"../assets/modelNavigator/genericLogo.png\";\nimport { Logger } from \"./logger\";\n\n/**\n * Fetch the tracked Data Model content manifest.\n *\n * @returns The parsed content manifest.\n * @throws An error if the manifest cannot be fetched.\n */\nexport const fetchManifest = async (DataCommon): Promise<DataModelManifest> => {\n  const response = await fetch(`${DataCommon}content.json`).catch(() => null);\n  const parsed = await response?.json().catch(() => null);\n  if (response && parsed) {\n    return parsed;\n  }\n  throw new Error(\"Unable to fetch or parse manifest\");\n};\n\n/**\n * Builds the asset URLs for the Data Model Navigator to import from\n *\n * @param dc The data common to build the asset URLs for\n * @returns ModelAssetUrls\n */\nexport const buildAssetUrls = (dc: DataCommon): ModelAssetUrls => ({\n  model_files: dc?.assets?.[\"model-files\"]?.map((file) => `${dc?.assets[\"path\"]}/${file}`) || [],\n  readme: dc?.assets?.[\"readme-file\"]\n    ? `${dc?.assets[\"path\"]}/${dc?.assets?.[\"readme-file\"]}`\n    : null,\n  loading_file: dc?.assets?.[\"loading-file\"]\n    ? `${dc?.assets[\"path\"]}/${dc?.assets?.[\"loading-file\"]}`\n    : null,\n  navigator_icon: dc?.assets?.[\"model-navigator-logo\"]\n    ? `${dc?.assets[\"path\"]}/${dc?.assets?.[\"model-navigator-logo\"]}`\n    : GenericModelLogo,\n});\n\n/**\n * Helper function to SAFELY build a set of base filter containers for the Data Model Navigator\n *\n * @example { category: [], uiDisplay: [], ... }\n * @param dc The data common to build the base filters for\n * @returns An array of base filters used by Data Model Navigator\n */\nexport const buildBaseFilterContainers = (dc: DataCommon): { [key: string]: [] } => {\n  if (!dc || !dc?.configuration?.facetFilterSearchData) {\n    return {};\n  }\n  if (\n    !Array.isArray(dc.configuration.facetFilterSearchData) ||\n    dc.configuration.facetFilterSearchData.length === 0\n  ) {\n    return {};\n  }\n\n  return dc.configuration.facetFilterSearchData.reduce(\n    (o, searchData) => ({\n      ...o,\n      [searchData?.datafield || \"base\"]: [],\n    }),\n    {}\n  );\n};\n\n/**\n * Helper function to build an array of possible filter options for the Data Model Navigator\n *\n * @example [ 'administrative', 'case', ... ]\n * @param dc The data common to build the filter options list for\n * @returns An array of filter options used by Data Model Navigator\n */\nexport const buildFilterOptionsList = (dc: DataCommon): string[] => {\n  if (!dc || !dc?.configuration?.facetFilterSearchData) {\n    return [];\n  }\n  if (\n    !Array.isArray(dc.configuration.facetFilterSearchData) ||\n    dc.configuration.facetFilterSearchData.length === 0\n  ) {\n    return [];\n  }\n\n  return dc.configuration.facetFilterSearchData.reduce((a, searchData) => {\n    if (!Array.isArray(searchData?.checkboxItems) || searchData.checkboxItems.length === 0) {\n      return a;\n    }\n\n    return [...a, ...searchData.checkboxItems.map((item) => item?.name?.toLowerCase())];\n  }, []);\n};\n\n/**\n * A function to parse the datalist and reolace enums with those returned from retrieveCde query\n * Commented out until api is ready\n * @params {void}\n */\nexport const updateEnums = (\n  cdeMap: Map<string, CDEInfo>,\n  dataList,\n  response: RetrieveCDEsResp[\"retrieveCDEs\"] = [],\n  apiError = false\n) => {\n  const responseMap: Map<string, RetrieveCDEsResp[\"retrieveCDEs\"][0]> = new Map();\n\n  defaultTo(response, []).forEach((item) =>\n    responseMap.set(`${item.CDECode}.${item.CDEVersion}`, item)\n  );\n\n  const resultMap: Map<string, RetrieveCDEsResp[\"retrieveCDEs\"][0] & { CDEOrigin: string }> =\n    new Map();\n  const mapKeyPrefixes: Map<string, string> = new Map();\n  const mapKeyPrefixesNoValues: Map<string, string> = new Map();\n\n  cdeMap.forEach((val, key) => {\n    const [prefix, cdeCodeAndVersion] = key.split(\";\");\n    const item = responseMap.get(cdeCodeAndVersion);\n\n    if (item) {\n      resultMap.set(key, { ...item, CDEOrigin: val?.CDEOrigin || \"\" });\n      mapKeyPrefixes.set(prefix, key);\n    } else {\n      mapKeyPrefixesNoValues.set(prefix, key);\n    }\n  });\n\n  const newObj = JSON.parse(JSON.stringify(dataList));\n\n  traverseAndReplace(newObj, resultMap, mapKeyPrefixes, mapKeyPrefixesNoValues, apiError);\n\n  return newObj;\n};\n\nexport const traverseAndReplace = (\n  node,\n  resultMap: Map<string, RetrieveCDEsResp[\"retrieveCDEs\"][0] & { CDEOrigin: string }>,\n  mapKeyPrefixes: Map<string, string>,\n  mapKeyPrefixesNoValues: Map<string, string>,\n  apiError: boolean,\n  parentKey = \"\"\n) => {\n  const getCDEPublicID = (cdeCode, cdeVersion) =>\n    `https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=${cdeCode}%20and%20ver_nr=${cdeVersion}`;\n\n  if (typeof node !== \"object\" || node === null) return;\n\n  if (node.properties) {\n    for (const key in node.properties) {\n      if (Object.hasOwn(node.properties, key)) {\n        const fullKey = `${parentKey}.${key}`.replace(/^\\./, \"\");\n        const prefixMatch = mapKeyPrefixes.get(fullKey);\n        const noValuesMatch = mapKeyPrefixesNoValues.get(fullKey);\n        const property = node.properties[key];\n        const fallbackMessage = [\n          \"Permissible values are currently not available. Please contact the Data Hub HelpDesk at NCICRDCHelpDesk@mail.nih.gov\",\n        ];\n\n        if (prefixMatch) {\n          const { CDECode, CDEFullName, CDEVersion, CDEOrigin, PermissibleValues } =\n            resultMap.get(prefixMatch);\n\n          // Populate CDE details\n          property.CDEFullName = CDEFullName;\n          property.CDECode = CDECode;\n          property.CDEPublicID = getCDEPublicID(CDECode, CDEVersion);\n          property.CDEVersion = CDEVersion;\n          property.CDEOrigin = CDEOrigin;\n\n          // Populate Permissible Values if available from API\n          if (Array.isArray(PermissibleValues) && PermissibleValues.length > 0) {\n            property.enum = PermissibleValues;\n            // Permissible Values from API are empty, convert property to \"string\" type\n          } else if (\n            Array.isArray(PermissibleValues) &&\n            PermissibleValues.length === 0 &&\n            property.enum\n          ) {\n            delete property.enum;\n            property.type = \"string\";\n          }\n        }\n\n        // API did not return any Permissible Values, populate with fallback message\n        if (noValuesMatch && property.enum) {\n          Logger.error(\"Unable to match CDE for property\", node?.properties?.[key]);\n          property.enum = fallbackMessage;\n        }\n      }\n    }\n  }\n\n  for (const subKey in node) {\n    if (Object.hasOwn(node, subKey)) {\n      traverseAndReplace(\n        node[subKey],\n        resultMap,\n        mapKeyPrefixes,\n        mapKeyPrefixesNoValues,\n        apiError,\n        `${parentKey}.${subKey}`\n      );\n    }\n  }\n};\n","import React, { FC, createContext, useContext, useEffect, useState } from \"react\";\nimport { fetchManifest } from \"../../utils\";\n\ntype LoadingState = {\n  status: Status.LOADING;\n  DataCommon: null;\n  error: null;\n};\n\ntype LoadedState = {\n  status: Status.LOADED;\n  DataCommon: DataCommon;\n  error: null;\n};\n\ntype ErrorState = {\n  status: Status.ERROR;\n  DataCommon: null;\n  error: Error;\n};\n\nexport type ContextState = LoadingState | LoadedState | ErrorState;\n\nexport enum Status {\n  LOADING = \"LOADING\",\n  LOADED = \"LOADED\",\n  ERROR = \"ERROR\",\n}\n\nconst initialState: ContextState = {\n  status: Status.LOADING,\n  DataCommon: null,\n  error: null,\n};\n\n/**\n * Data Common Context Provider\n *\n * NOTE: Do NOT use this context directly. Use the useDataCommonContext hook instead.\n *       this is exported for testing purposes only.\n *\n * @see ContextState\n * @see useDataCommonContext\n */\nexport const Context = createContext<ContextState>(null);\nContext.displayName = \"DataCommonContext\";\n\n/**\n * Data Common Context Hook\n *\n * Note:\n * - This fetches the manifest for the data common assets and caches it in the session\n * - If it fails to fetch the manifest, it will throw an error\n * - It will provide the DataCommon information, configuration, and model assets\n *\n * @see DataCommonProvider\n * @see ContextState\n * @returns {ContextState} - DataCommon context\n */\nexport const useDataCommonContext = (): ContextState => {\n  const context = useContext<ContextState>(Context);\n\n  if (!context) {\n    throw new Error(\n      \"useDataCommonContext cannot be used outside of the DataCommonProvider component\"\n    );\n  }\n\n  return context;\n};\n\ntype ProviderProps = {\n  DataCommon: DataCommon[\"name\"];\n  children: React.ReactNode;\n};\n\n/**\n * Creates a Data Common context provider\n *\n * @see useDataCommonContext\n * @param {ProviderProps} props\n * @returns {JSX.Element} Context provider\n */\nexport const DataCommonProvider: FC<ProviderProps> = ({ DataCommon, children }: ProviderProps) => {\n  const [state, setState] = useState<ContextState>(initialState);\n\n  useEffect(() => {\n    if (!DataCommon) {\n      setState({\n        status: Status.ERROR,\n        DataCommon: null,\n        error: new Error(\"The provided Data Common is not supported\"),\n      });\n      return;\n    }\n\n    setState(initialState);\n\n    (async () => {\n      const manifest = await fetchManifest(DataCommon).catch(() => null);\n      if (!manifest) {\n        setState({\n          status: Status.ERROR,\n          DataCommon: null,\n          error: new Error(`Unable to fetch manifest for ${DataCommon}`),\n        });\n        return;\n      }\n      manifest[\"path\"] = DataCommon;\n      setState({\n        status: Status.LOADED,\n        DataCommon: {\n          ...manifest[\"ui_settings\"],\n          assets: { ...manifest },\n        },\n        error: null,\n      });\n    })();\n  }, [DataCommon]);\n\n  return <Context.Provider value={state}>{children}</Context.Provider>;\n};\n","const filterResetIcon = {\n  src: \"https://raw.githubusercontent.com/CBIIT/datacommons-assets/main/bento/images/icons/svgs/Clear-icon.svg\",\n  alt: \"Reset icon\",\n  size: \"12 px\",\n};\n\n/**\n * Configuration for the facet filter (i.e. the entire DMN)\n */\nexport const baseConfiguration = {\n  // Populated by the useBuildReduxStore hook\n  facetSearchData: null,\n  facetSectionVariables: null,\n  baseFilters: {},\n  filterOptions: [],\n  filterSections: [],\n  // Base configuration that does not change by model\n  resetIcon: filterResetIcon,\n  showCheckboxCount: 6,\n};\n\n/**\n * Base configuration for the graph view\n */\nexport const graphViewConfig = {\n  canvas: {\n    fit: {\n      x: 0,\n      y: 20,\n      zoom: 0.7,\n      minZoom: 0.7,\n      maxZoom: 2,\n    },\n  },\n};\n\n/**\n * Fall-back title for the Data Model README popup\n */\nexport const defaultReadMeTitle = \"Understanding the Data Model\";\n","import { useState } from \"react\";\nimport { createStore, combineReducers, Store } from \"redux\";\nimport {\n  ddgraph,\n  moduleReducers as submission,\n  versionInfo,\n  getModelExploreData,\n} from \"data-model-navigator\";\nimport {\n  baseConfiguration,\n  defaultReadMeTitle,\n  graphViewConfig as graphConfig,\n} from \"../config/ModelNavigator\";\nimport {\n  buildAssetUrls,\n  buildBaseFilterContainers,\n  buildFilterOptionsList,\n  Logger,\n} from \"../utils\";\n\nexport type ReduxStoreStatus = \"waiting\" | \"loading\" | \"error\" | \"success\";\n\nexport type ReduxStoreResult = [\n  { status: ReduxStoreStatus; store: Store },\n  () => void,\n  (assets: DataCommon) => void,\n];\n\nconst makeStore = (): Store => {\n  const reducers = { ddgraph, versionInfo, submission };\n  const newStore = createStore(combineReducers(reducers));\n\n  // @ts-ignore\n  newStore.injectReducer = (key, reducer) => {\n    reducers[key] = reducer;\n    newStore.replaceReducer(combineReducers(reducers));\n  };\n\n  return newStore;\n};\n\n/**\n * A hook to build and populate the Redux store with DMN data\n *\n * @params {void}\n */\nconst useBuildReduxStore = (): ReduxStoreResult => {\n  const [status, setStatus] = useState<ReduxStoreStatus>(\"waiting\");\n  const [store, setStore] = useState<Store>(makeStore());\n\n  // const [retrieveCDEs, { error: retrieveCDEsError }] = useLazyQuery<\n  //   RetrieveCDEsResp,\n  //   RetrieveCDEsInput\n  // >(RETRIEVE_CDEs, {\n  //   context: { clientName: \"backend\" },\n  //   fetchPolicy: \"cache-and-network\",\n  // });\n\n  /**\n   * Rebuilds the store from scratch\n   *\n   * @params {void}\n   */\n  const resetStore = () => {\n    setStatus(\"loading\");\n    setStore(makeStore());\n  };\n\n  /**\n   * Injects the Data Model into the store\n   *\n   * @param datacommon The Data Model to inject assets from\n   */\n  const populateStore = async (datacommon: DataCommon) => {\n    if (\n      !datacommon?.name ||\n      !datacommon?.assets ||\n      !datacommon?.assets[\"path\"] ||\n      !datacommon.configuration?.pdfConfig\n    ) {\n      setStatus(\"error\");\n      return;\n    }\n\n    setStatus(\"loading\");\n    const graphViewConfig = {\n      ...graphConfig,\n      ...datacommon.configuration.graphViewConfig,\n    };\n\n    const assets = buildAssetUrls(datacommon);\n    const response = await getModelExploreData(...assets.model_files)?.catch((e) => {\n      Logger.error(e);\n      return null;\n    });\n    if (!response?.data || !response?.version) {\n      setStatus(\"error\");\n      return;\n    }\n\n    const { /* cdeMap, */ data: dataList } = response;\n    const dictionary = dataList;\n\n    // if (cdeMap) {\n    //   const cdeInfo: CDEInfo[] = Array.from(response.cdeMap.values());\n    //   try {\n    //     const CDEs = await retrieveCDEs({\n    //       variables: {\n    //         cdeInfo: cdeInfo.map(({ CDECode, CDEVersion }) => ({ CDECode, CDEVersion })),\n    //       },\n    //     });\n\n    //     if (retrieveCDEsError) {\n    //       dictionary = updateEnums(cdeMap, dataList, [], true);\n    //     } else {\n    //       const retrievedCDEs = defaultTo(CDEs.data.retrieveCDEs, []);\n    //       dictionary = updateEnums(cdeMap, dataList, retrievedCDEs);\n    //     }\n    //   } catch (error) {\n    //     dictionary = updateEnums(cdeMap, dataList, [], true);\n    //   }\n    // } else {\n    // dictionary = dataList;\n    // }\n\n    store.dispatch({ type: \"RECEIVE_VERSION_INFO\", data: response.version });\n\n    store.dispatch({\n      type: \"REACT_FLOW_GRAPH_DICTIONARY\",\n      dictionary,\n      pdfDownloadConfig: datacommon.configuration.pdfConfig,\n      graphViewConfig,\n    });\n\n    store.dispatch({\n      type: \"RECEIVE_DICTIONARY\",\n      payload: {\n        data: dictionary,\n        facetfilterConfig: {\n          ...baseConfiguration,\n          facetSearchData: datacommon.configuration.facetFilterSearchData,\n          facetSectionVariables: datacommon.configuration.facetFilterSectionVariables,\n          baseFilters: buildBaseFilterContainers(datacommon),\n          filterSections: datacommon.configuration.facetFilterSearchData.map((s) => s?.datafield),\n          filterOptions: buildFilterOptionsList(datacommon),\n        },\n        pageConfig: {\n          title: datacommon.configuration.pageTitle,\n          iconSrc: assets.navigator_icon,\n        },\n        readMeConfig: {\n          readMeUrl: assets.readme,\n          readMeTitle: datacommon.configuration?.readMeTitle || defaultReadMeTitle,\n          allowDownload: false,\n        },\n        pdfDownloadConfig: datacommon.configuration.pdfConfig,\n        loadingExampleConfig: {\n          type: \"static\",\n          url: assets.loading_file,\n        },\n        graphViewConfig,\n      },\n    });\n\n    // MVP-2 M2 NOTE: This resets the search history to prevent the data models\n    // from overlapping on searches. A future improvement would be to isolate\n    // the localStorage history key to the data model based on a config option.\n    store.dispatch({ type: \"SEARCH_CLEAR_HISTORY\" });\n\n    setStatus(\"success\");\n  };\n\n  return [{ status, store }, resetStore, populateStore];\n};\n\nexport default useBuildReduxStore;\n","import React, { FC } from \"react\";\nimport { Box } from \"@mui/material\";\n// eslint-disable-next-line import/no-extraneous-dependencies -- Required to use legacy version from DMN\nimport { Provider } from \"react-redux\";\nimport { ReduxDataDictionary } from \"data-model-navigator\";\nimport SuspenseLoader from \"../../components/SuspenseLoader\";\nimport { Status, useDataCommonContext } from \"../../components/Contexts/DataCommonContext\";\nimport useBuildReduxStore from \"../../hooks/useBuildReduxStore\";\n\n/**\n * Encapsulates the Data Model Navigator component\n *\n * This component handles the following:\n * - Loading the Data Common assets\n * - Building the Redux store for the Data Model Navigator\n * - Rendering the Data Model Navigator\n *\n * @returns {JSX.Element}\n */\nconst ModelNavigator: FC = () => {\n  const { status, DataCommon } = useDataCommonContext();\n  const [{ status: buildStatus, store }, , populate] = useBuildReduxStore();\n\n  if (status === Status.LOADING || buildStatus === \"loading\") {\n    return <SuspenseLoader />;\n  }\n\n  if (status === Status.LOADED && buildStatus === \"waiting\") {\n    populate(DataCommon);\n    return <SuspenseLoader />;\n  }\n\n  if (!DataCommon || status === Status.ERROR || buildStatus === \"error\") {\n    throw new Error(\"Unable to build Model Navigator for the selected Data Common\");\n  }\n\n  return (\n    <Box sx={{ mt: \"40px\" }}>\n      <Provider store={store}>\n        <ReduxDataDictionary pdfDownloadConfig={DataCommon.configuration?.pdfConfig} />\n      </Provider>\n    </Box>\n  );\n};\n\nexport default ModelNavigator;\n","import React, { Component } from \"react\";\nimport { Alert } from \"@mui/material\";\n\ntype Props = {\n  /**\n   * The error message to display if an error occurs.\n   *\n   * @default \"Error loading component.\"\n   */\n  errorMessage?: string;\n  /**\n   * The children to render.\n   */\n  children: React.ReactNode;\n};\n\ntype State = {\n  /**\n   * Whether an error has occurred in the children.\n   * Displays `errorMessage` if true.\n   *\n   * @default false\n   */\n  hasError: boolean;\n};\n\n/**\n * A error boundary component that catches errors in its children\n * and displays a fallback UI.\n *\n * @param children Component Children\n * @param [errorMessage] The error message to display.\n * @returns The error boundary component\n */\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  render() {\n    const { children, errorMessage } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <Alert sx={{ m: 3, p: 2 }} severity=\"error\" data-testid=\"error-boundary-alert\">\n          {errorMessage || \"Error loading component.\"}\n        </Alert>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport NavigatorView from \"./NavigatorView\";\nimport ErrorBoundary from \"../../components/ErrorBoundary\";\nimport { DataCommonProvider } from \"../../components/Contexts/DataCommonContext\";\nimport usePageTitle from \"../../hooks/usePageTitle\";\n\nconst ModelNavigatorController: React.FC = () => {\n  usePageTitle(\"Model Navigator\");\n\n  // Custom hook to parse query parameters\n  const useQuery = () => new URLSearchParams(useLocation().search);\n\n  const query = useQuery();\n  const defaultConfig =\n    \"https://raw.githubusercontent.com/jonkiky/crdc-data-model-navigator/refs/heads/data/ctdc/\";\n  let config = query.get(\"config\") || defaultConfig; // Fallback to defaultConfig if `config` is not present\n\n  // Ensure config has a trailing backslash\n  if (!config.endsWith(\"/\")) {\n    config += \"/\";\n  }\n\n  return (\n    <DataCommonProvider key={config} DataCommon={config}>\n      <ErrorBoundary errorMessage=\"Unable to load the Model Navigator for the requested model\">\n        <NavigatorView />\n      </ErrorBoundary>\n    </DataCommonProvider>\n  );\n};\n\nexport default ModelNavigatorController;\n","import { useEffect } from \"react\";\n\n/**\n * A hook to set and restore the page title\n *\n * @param title The new title to set\n * @param [restore] Restore the title on unmount\n */\nconst usePageTitle = (title: string, restore = true): void => {\n  // Update title on mount\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  // Revert on unmount if requested\n  useEffect(() => {\n    if (!restore) {\n      return () => {};\n    }\n\n    return () => {\n      document.title = \"CRDC Submission Portal\";\n    };\n  }, []);\n};\n\nexport default usePageTitle;\n"],"names":["Logger","message","_len2","arguments","length","optionalParams","Array","_key2","level","env","NODE_ENV","REACT_APP_DEV_TIER","timestamp","Date","toISOString","_len","_key","console","error","concat","LoggingWrapper","buildBaseFilterContainers","dc","_dc$configuration","configuration","facetFilterSearchData","isArray","reduce","o","searchData","datafield","buildFilterOptionsList","_dc$configuration2","a","checkboxItems","map","item","_item$name","name","toLowerCase","Status","initialState","status","LOADING","DataCommon","Context","createContext","displayName","DataCommonProvider","_ref","children","state","setState","useState","useEffect","manifest","async","response","fetch","catch","parsed","json","Error","fetchManifest","LOADED","assets","ERROR","_jsx","Provider","value","baseConfiguration","facetSearchData","facetSectionVariables","baseFilters","filterOptions","filterSections","resetIcon","src","alt","size","showCheckboxCount","graphViewConfig","canvas","fit","x","y","zoom","minZoom","maxZoom","makeStore","reducers","ddgraph","versionInfo","submission","newStore","createStore","combineReducers","injectReducer","key","reducer","replaceReducer","useBuildReduxStore","setStatus","store","setStore","resetStore","_datacommon$configura","_getModelExploreData","_datacommon$configura2","datacommon","pdfConfig","graphConfig","_dc$assets","_dc$assets$modelFile","_dc$assets2","_dc$assets3","_dc$assets4","_dc$assets5","_dc$assets6","_dc$assets7","model_files","file","readme","loading_file","navigator_icon","buildAssetUrls","getModelExploreData","e","data","version","dataList","dictionary","dispatch","type","pdfDownloadConfig","payload","facetfilterConfig","facetFilterSectionVariables","s","pageConfig","title","pageTitle","iconSrc","readMeConfig","readMeUrl","readMeTitle","allowDownload","loadingExampleConfig","url","ModelNavigator","_DataCommon$configura","useDataCommonContext","context","useContext","buildStatus","populate","SuspenseLoader","Box","sx","mt","ReduxDataDictionary","ErrorBoundary","Component","constructor","props","super","this","hasError","static","render","errorMessage","Alert","m","p","severity","ModelNavigatorController","usePageTitle","config","URLSearchParams","useLocation","search","get","endsWith","NavigatorView","restore","undefined","document"],"sourceRoot":""}