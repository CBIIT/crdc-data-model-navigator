(self.webpackChunkcrdc_data_model_navigator=self.webpackChunkcrdc_data_model_navigator||[]).push([[333],{16864:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>Un});var i=e(72791),s=e(57689),o=e(64554),a=e(60364),r=e(39354),d=e(6383),c=e(8308),u=e(80184);let l=function(n){return n.LOADING="LOADING",n.LOADED="LOADED",n.ERROR="ERROR",n}({});const m={status:l.LOADING,DataCommon:null,error:null},p=(0,i.createContext)(null);p.displayName="DataCommonContext";const $=n=>{let{DataCommon:t,children:e}=n;const[s,o]=(0,i.useState)(m);return(0,i.useEffect)((()=>{t?(o(m),(async()=>{const n=await(0,c.eq)(t).catch((()=>null));n?(n.path=t,o({status:l.LOADED,DataCommon:{...n.ui_settings,assets:{...n}},error:null})):o({status:l.ERROR,DataCommon:null,error:new Error("Unable to fetch manifest for ".concat(t))})})()):o({status:l.ERROR,DataCommon:null,error:new Error("The provided Data Common is not supported")})}),[t]),(0,u.jsx)(p.Provider,{value:s,children:e})};var g=e(59050),D=e(49462),I=e(763);const f={facetSearchData:null,facetSectionVariables:null,baseFilters:{},filterOptions:[],filterSections:[],resetIcon:{src:"https://raw.githubusercontent.com/CBIIT/datacommons-assets/main/bento/images/icons/svgs/Clear-icon.svg",alt:"Reset icon",size:"12 px"},showCheckboxCount:6},b={legend:{},canvas:{fit:{x:0,y:20,zoom:.7,minZoom:.7,maxZoom:2}}};var y,v=e(30168),S=e(9383);(0,S.ZP)(y||(y=(0,v.Z)(["\n  mutation reviewApplication($id: ID!) {\n    reviewApplication(_id: $id) {\n      _id\n      status\n    }\n  }\n"])));var A;(0,S.ZP)(A||(A=(0,v.Z)(["\n  mutation reopenApplication($id: ID!) {\n    reopenApplication(_id: $id) {\n      _id\n      status\n      createdAt\n      updatedAt\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n      }\n      applicant {\n        applicantID\n        applicantName\n      }\n    }\n  }\n"])));var C;(0,S.ZP)(C||(C=(0,v.Z)(["\n  mutation approveApplication(\n    $id: ID!\n    $comment: String\n    $wholeProgram: Boolean\n    $institutions: [String]\n  ) {\n    approveApplication(\n      _id: $id\n      wholeProgram: $wholeProgram\n      comment: $comment\n      institutions: $institutions\n    ) {\n      _id\n    }\n  }\n"])));var Z;(0,S.ZP)(Z||(Z=(0,v.Z)(["\n  mutation inquireApplication($id: ID!, $comment: String!) {\n    inquireApplication(_id: $id, comment: $comment) {\n      _id\n    }\n  }\n"])));var P;(0,S.ZP)(P||(P=(0,v.Z)(["\n  mutation rejectApplication($id: ID!, $comment: String!) {\n    rejectApplication(_id: $id, comment: $comment) {\n      _id\n    }\n  }\n"])));var h;(0,S.ZP)(h||(h=(0,v.Z)(["\n  mutation saveApplication($application: AppInput!) {\n    saveApplication(application: $application) {\n      _id\n      status\n      createdAt\n      updatedAt\n      submittedDate\n      ORCID\n      openAccess\n      controlledAccess\n      PI\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n      }\n      applicant {\n        applicantID\n        applicantName\n      }\n    }\n  }\n"])));var _;(0,S.ZP)(_||(_=(0,v.Z)(["\n  mutation submitApplication($id: ID!) {\n    submitApplication(_id: $id) {\n      _id\n    }\n  }\n"])));var N;(0,S.ZP)(N||(N=(0,v.Z)(["\n  query getMyLastApplication {\n    getMyLastApplication {\n      _id\n      questionnaireData\n    }\n  }\n"])));var R;(0,S.ZP)(R||(R=(0,v.Z)(["\n  query getApplication($id: ID!) {\n    getApplication(_id: $id) {\n      _id\n      status\n      createdAt\n      updatedAt\n      submittedDate\n      openAccess\n      controlledAccess\n      PI\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n      }\n      applicant {\n        applicantID\n        applicantName\n      }\n      programName\n      studyAbbreviation\n      questionnaireData\n      conditional\n      pendingConditions\n    }\n  }\n"])));var B;(0,S.ZP)(B||(B=(0,v.Z)(["\n  mutation updateMyUser($userInfo: UpdateUserInput!) {\n    updateMyUser(userInfo: $userInfo) {\n      firstName\n      lastName\n      userStatus\n      role\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n        dbGaPID\n        controlledAccess\n      }\n    }\n  }\n"])));var T;(0,S.ZP)(T||(T=(0,v.Z)(["\n  query listInstitutions {\n    listInstitutions\n  }\n"])));var E;const O=(0,S.ZP)(E||(E=(0,v.Z)(["\n  query retrieveCDEs($cdeInfo: [CDEInput!]!) {\n    retrieveCDEs(CDEInfo: $cdeInfo) {\n      _id\n      CDEFullName\n      CDECode\n      CDEVersion\n      PermissibleValues\n      createdAt\n      updatedAt\n    }\n  }\n"])));var w;(0,S.ZP)(w||(w=(0,v.Z)(["\n  query listApplications($first: Int, $offset: Int, $orderBy: String, $sortDirection: String) {\n    listApplications(\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      applications {\n        _id\n        programName\n        studyAbbreviation\n        status\n        createdAt\n        updatedAt\n        submittedDate\n        applicant {\n          applicantName\n          applicantID\n        }\n        conditional\n        pendingConditions\n      }\n    }\n  }\n"])));var q;(0,S.ZP)(q||(q=(0,v.Z)(["\n  mutation createSubmission(\n    $studyID: String!\n    $dataCommons: String!\n    $name: String!\n    $intention: String!\n    $dataType: String!\n  ) {\n    createSubmission(\n      studyID: $studyID\n      dataCommons: $dataCommons\n      name: $name\n      intention: $intention\n      dataType: $dataType\n    ) {\n      _id\n      status\n      createdAt\n    }\n  }\n"])));var F;(0,S.ZP)(F||(F=(0,v.Z)(["\n  query getSubmission($id: ID!) {\n    getSubmission(_id: $id) {\n      _id\n      name\n      submitterID\n      submitterName\n      organization {\n        _id\n        name\n      }\n      dataCommons\n      modelVersion\n      studyID\n      studyAbbreviation\n      dbGaPID\n      bucketName\n      rootPath\n      status\n      metadataValidationStatus\n      fileValidationStatus\n      crossSubmissionStatus\n      validationStarted\n      validationEnded\n      validationScope\n      validationType\n      deletingData\n      fileErrors {\n        submissionID\n        type\n        validationType\n        batchID\n        displayID\n        submittedID\n        severity\n        uploadedDate\n        validatedDate\n        errors {\n          title\n          description\n        }\n        warnings {\n          title\n          description\n        }\n      }\n      history {\n        status\n        reviewComment\n        dateTime\n        userID\n        userName\n      }\n      conciergeName\n      conciergeEmail\n      intention\n      dataType\n      otherSubmissions\n      nodeCount\n      collaborators {\n        collaboratorID\n        collaboratorName\n        permission\n      }\n      createdAt\n      updatedAt\n    }\n\n    submissionStats(_id: $id) {\n      stats {\n        nodeName\n        total\n        new\n        passed\n        warning\n        error\n      }\n    }\n\n    batchStatusList: listBatches(submissionID: $id, first: -1) {\n      batches {\n        _id\n        status\n      }\n    }\n  }\n"])));var x;(0,S.ZP)(x||(x=(0,v.Z)(["\n  query listSubmissions(\n    $organization: String\n    $status: String\n    $dataCommons: String\n    $name: String\n    $dbGaPID: String\n    $submitterName: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n  ) {\n    listSubmissions(\n      organization: $organization\n      status: $status\n      dataCommons: $dataCommons\n      name: $name\n      dbGaPID: $dbGaPID\n      submitterName: $submitterName\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      submissions {\n        _id\n        name\n        submitterName\n        dataCommons\n        organization {\n          name\n        }\n        studyAbbreviation\n        dbGaPID\n        modelVersion\n        status\n        archived\n        conciergeName\n        nodeCount\n        createdAt\n        updatedAt\n        intention\n      }\n      organizations {\n        _id\n        name\n      }\n      submitterNames\n      dataCommons\n    }\n  }\n"])));var G;(0,S.ZP)(G||(G=(0,v.Z)(["\n  mutation submissionAction($submissionID: ID!, $action: String!, $comment: String) {\n    submissionAction(submissionID: $submissionID, action: $action, comment: $comment) {\n      _id\n    }\n  }\n"])));var k;(0,S.ZP)(k||(k=(0,v.Z)(["\n  mutation createBatch($submissionID: ID!, $type: String, $files: [String!]!) {\n    createBatch(submissionID: $submissionID, type: $type, files: $files) {\n      _id\n      submissionID\n      bucketName\n      filePrefix\n      type\n      fileCount\n      files {\n        fileName\n        signedURL\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"])));var L;(0,S.ZP)(L||(L=(0,v.Z)(["\n  mutation updateBatch($batchID: ID!, $files: [UploadResult]) {\n    updateBatch(batchID: $batchID, files: $files) {\n      _id\n      submissionID\n      type\n      fileCount\n      files {\n        filePrefix\n        fileName\n        size\n        status\n        errors\n        createdAt\n        updatedAt\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"])));var U,z,V;const Q=(0,S.ZP)(U||(U=(0,v.Z)(["\n  fragment BaseBatchFragment on Batch {\n    _id\n    displayID\n    createdAt\n    updatedAt\n  }\n"]))),M=(0,S.ZP)(z||(z=(0,v.Z)(["\n  fragment BatchFragment on Batch {\n    submissionID\n    type\n    fileCount\n    files {\n      nodeType\n      filePrefix\n      fileName\n      status\n      errors\n      createdAt\n      updatedAt\n    }\n    submitterName\n    status\n    errors\n  }\n"])));(0,S.ZP)(V||(V=(0,v.Z)(["\n  query listBatches(\n    $submissionID: ID!\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    listBatches(\n      submissionID: $submissionID\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      batches {\n        ...BaseBatchFragment\n        ...BatchFragment @skip(if: $partial)\n      }\n    }\n    batchStatusList: listBatches(submissionID: $submissionID, first: -1) {\n      batches {\n        _id\n        status\n      }\n    }\n  }\n  ","\n  ","\n"])),M,Q);var j,Y,H;const K=(0,S.ZP)(j||(j=(0,v.Z)(["\n  fragment BaseQCResultFragment on QCResult {\n    errors {\n      title\n      description\n    }\n  }\n"]))),W=(0,S.ZP)(Y||(Y=(0,v.Z)(["\n  fragment QCResultFragment on QCResult {\n    submissionID\n    type\n    validationType\n    batchID\n    displayID\n    submittedID\n    severity\n    uploadedDate\n    validatedDate\n    errors {\n      title\n      description\n    }\n    warnings {\n      title\n      description\n    }\n  }\n"])));(0,S.ZP)(H||(H=(0,v.Z)(["\n  query submissionQCResults(\n    $id: ID!\n    $issueCode: String\n    $nodeTypes: [String]\n    $batchIDs: [ID]\n    $severities: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    submissionQCResults(\n      _id: $id\n      issueCode: $issueCode\n      nodeTypes: $nodeTypes\n      batchIDs: $batchIDs\n      severities: $severities\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      results {\n        ...BaseQCResultFragment\n        ...QCResultFragment @skip(if: $partial)\n      }\n    }\n  }\n  ","\n  ","\n"])),W,K);var J,X,nn;const tn=(0,S.ZP)(J||(J=(0,v.Z)(["\n  fragment BaseAggregatedQCResultFragment on aggregatedQCResult {\n    code\n    title\n  }\n"]))),en=(0,S.ZP)(X||(X=(0,v.Z)(["\n  fragment AggregatedQCResultFragment on aggregatedQCResult {\n    severity\n    count\n  }\n"])));(0,S.ZP)(nn||(nn=(0,v.Z)(["\n  query aggregatedSubmissionQCResults(\n    $submissionID: ID!\n    $severity: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    aggregatedSubmissionQCResults(\n      submissionID: $submissionID\n      severity: $severity\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      results {\n        ...BaseAggregatedQCResultFragment\n        ...AggregatedQCResultFragment @skip(if: $partial)\n      }\n    }\n  }\n  ","\n  ","\n"])),en,tn);var sn;(0,S.ZP)(sn||(sn=(0,v.Z)(["\n  query submissionCrossValidationResults(\n    $submissionID: ID!\n    $nodeTypes: [String]\n    $batchIDs: [ID]\n    $severities: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n  ) {\n    submissionCrossValidationResults(\n      submissionID: $submissionID\n      nodeTypes: $nodeTypes\n      batchIDs: $batchIDs\n      severities: $severities\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      results {\n        submissionID\n        type\n        validationType\n        batchID\n        displayID\n        submittedID\n        severity\n        uploadedDate\n        validatedDate\n        errors {\n          title\n          description\n        }\n        warnings {\n          title\n          description\n        }\n        conflictingSubmission\n      }\n    }\n  }\n"])));var on;(0,S.ZP)(on||(on=(0,v.Z)(["\n  mutation validateSubmission($_id: ID!, $types: [String], $scope: String) {\n    validateSubmission(_id: $_id, types: $types, scope: $scope) {\n      success\n    }\n  }\n"])));var an;(0,S.ZP)(an||(an=(0,v.Z)(["\n  query listSubmissionNodeTypes($_id: ID!) {\n    listSubmissionNodeTypes(_id: $_id)\n  }\n"])));var rn;(0,S.ZP)(rn||(rn=(0,v.Z)(["\n  query getNodeDetail($submissionID: String!, $nodeType: String!, $nodeID: String!) {\n    getNodeDetail(submissionID: $submissionID, nodeType: $nodeType, nodeID: $nodeID) {\n      parents {\n        nodeType\n        total\n      }\n      children {\n        nodeType\n        total\n      }\n      IDPropName\n    }\n  }\n"])));var dn,cn;const un=(0,S.ZP)(dn||(dn=(0,v.Z)(["\n  fragment RelatedNodeFragment on Node {\n    nodeType\n    nodeID\n    status\n    props\n  }\n"])));(0,S.ZP)(cn||(cn=(0,v.Z)(["\n  query getRelatedNodes(\n    $submissionID: String!\n    $nodeType: String!\n    $nodeID: String!\n    $relationship: String!\n    $relatedNodeType: String!\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $propertiesOnly: Boolean = false\n  ) {\n    getRelatedNodes(\n      submissionID: $submissionID\n      nodeType: $nodeType\n      nodeID: $nodeID\n      relationship: $relationship\n      relatedNodeType: $relatedNodeType\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total @skip(if: $propertiesOnly)\n      properties @include(if: $propertiesOnly)\n      IDPropName @include(if: $propertiesOnly)\n      nodes {\n        ...RelatedNodeFragment @skip(if: $propertiesOnly)\n      }\n    }\n  }\n  ","\n"])),un);var ln,mn;const pn=(0,S.ZP)(ln||(ln=(0,v.Z)(["\n  fragment SubmissionNodeFragment on Node {\n    nodeType\n    status\n    props\n  }\n"])));(0,S.ZP)(mn||(mn=(0,v.Z)(["\n  query getSubmissionNodes(\n    $_id: String!\n    $nodeType: String!\n    $status: String\n    $submittedID: String\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $partial: Boolean = false\n  ) {\n    getSubmissionNodes(\n      submissionID: $_id\n      nodeType: $nodeType\n      status: $status\n      nodeID: $submittedID\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n    ) {\n      total\n      IDPropName @skip(if: $partial)\n      properties @skip(if: $partial)\n      nodes {\n        nodeID\n        ...SubmissionNodeFragment @skip(if: $partial)\n      }\n    }\n  }\n  ","\n"])),pn);var $n;(0,S.ZP)($n||($n=(0,v.Z)(["\n  query submissionStats($id: ID!) {\n    submissionStats(_id: $id) {\n      stats {\n        nodeName\n        total\n        new\n        passed\n        warning\n        error\n      }\n    }\n  }\n"])));var gn;(0,S.ZP)(gn||(gn=(0,v.Z)(["\n  mutation deleteDataRecords($_id: String!, $nodeType: String!, $nodeIds: [String!]) {\n    deleteDataRecords(submissionID: $_id, nodeType: $nodeType, nodeIDs: $nodeIds) {\n      success\n      message\n    }\n  }\n"])));var Dn;(0,S.ZP)(Dn||(Dn=(0,v.Z)(["\n  query retrieveCLIConfig($_id: String!, $apiURL: String!, $dataFolder: String, $manifest: String) {\n    retrieveCLIConfig(\n      submissionID: $_id\n      apiURL: $apiURL\n      dataFolder: $dataFolder\n      manifest: $manifest\n    )\n  }\n"])));var In;(0,S.ZP)(In||(In=(0,v.Z)(["\n  query listPotentialCollaborators($submissionID: String!) {\n    listPotentialCollaborators(submissionID: $submissionID) {\n      _id\n      firstName\n      lastName\n    }\n  }\n"])));var fn;(0,S.ZP)(fn||(fn=(0,v.Z)(["\n  mutation editSubmissionCollaborators($submissionID: ID!, $collaborators: [CollaboratorInput]) {\n    editSubmissionCollaborators(submissionID: $submissionID, collaborators: $collaborators) {\n      _id\n      collaborators {\n        collaboratorID\n        collaboratorName\n        permission\n      }\n    }\n  }\n"])));var bn;e(34949);(0,S.ZP)(bn||(bn=(0,v.Z)(["\n  query getUser($userID: ID!) {\n    getUser(userID: $userID) {\n      _id\n      firstName\n      lastName\n      userStatus\n      role\n      IDP\n      email\n      createdAt\n      updateAt\n      dataCommons\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      permissions\n      notifications\n    }\n  }\n"])));var yn;(0,S.ZP)(yn||(yn=(0,v.Z)(["\n  query listUsers {\n    listUsers {\n      _id\n      firstName\n      lastName\n      IDP\n      email\n      userStatus\n      role\n    }\n  }\n"])));var vn;(0,S.ZP)(vn||(vn=(0,v.Z)(["\n  mutation editUser(\n    $userID: ID!\n    $userStatus: String\n    $role: String\n    $studies: [String]\n    $dataCommons: [String]\n    $permissions: [String]\n    $notifications: [String]\n  ) {\n    editUser(\n      userID: $userID\n      status: $userStatus\n      role: $role\n      studies: $studies\n      dataCommons: $dataCommons\n      permissions: $permissions\n      notifications: $notifications\n    ) {\n      userStatus\n      role\n      dataCommons\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n        dbGaPID\n        controlledAccess\n      }\n      permissions\n      notifications\n    }\n  }\n"])));var Sn;(0,S.ZP)(Sn||(Sn=(0,v.Z)(["\n  mutation requestAccess($role: String!, $studies: [String]!, $additionalInfo: String) {\n    requestAccess(role: $role, studies: $studies, additionalInfo: $additionalInfo) {\n      success\n      message\n    }\n  }\n"])));var An;(0,S.ZP)(An||(An=(0,v.Z)(["\n  query retrievePBACDefaults($roles: [String!]!) {\n    retrievePBACDefaults(roles: $roles) {\n      role\n      permissions {\n        _id\n        group\n        name\n        order\n        checked\n        disabled\n      }\n      notifications {\n        _id\n        group\n        name\n        order\n        checked\n        disabled\n      }\n    }\n  }\n"])));var Cn;(0,S.ZP)(Cn||(Cn=(0,v.Z)(["\n  query listOrganizations {\n    listOrganizations {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeName\n      studies {\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n  }\n"])));var Zn;(0,S.ZP)(Zn||(Zn=(0,v.Z)(['\n  query getOrganizationData($orgID: ID!, $organization: String) {\n    getOrganization(orgID: $orgID) {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeID\n      conciergeName\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n    listSubmissions(\n      first: -1\n      offset: 0\n      orderBy: "updatedAt"\n      sortDirection: "ASC"\n      organization: $organization\n      status: "All"\n    ) {\n      submissions {\n        _id\n        studyAbbreviation\n        status\n      }\n    }\n  }\n'])));var Pn;(0,S.ZP)(Pn||(Pn=(0,v.Z)(["\n  mutation editOrganization(\n    $orgID: ID!\n    $name: String\n    $abbreviation: String\n    $description: String\n    $conciergeID: String\n    $studies: [ApprovedStudyInput]\n    $status: String\n  ) {\n    editOrganization(\n      orgID: $orgID\n      name: $name\n      abbreviation: $abbreviation\n      description: $description\n      conciergeID: $conciergeID\n      studies: $studies\n      status: $status\n    ) {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeID\n      conciergeName\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n  }\n"])));var hn;(0,S.ZP)(hn||(hn=(0,v.Z)(["\n  query listActiveCurators {\n    listActiveCurators {\n      userID\n      firstName\n      lastName\n      createdAt\n      updateAt\n    }\n  }\n"])));var _n;(0,S.ZP)(_n||(_n=(0,v.Z)(["\n  query listApprovedStudies(\n    $first: Int\n    $offset: Int\n    $orderBy: String\n    $sortDirection: String\n    $dbGaPID: String\n    $controlledAccess: String\n    $study: String\n  ) {\n    listApprovedStudies(\n      first: $first\n      offset: $offset\n      orderBy: $orderBy\n      sortDirection: $sortDirection\n      dbGaPID: $dbGaPID\n      controlledAccess: $controlledAccess\n      study: $study\n    ) {\n      total\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n        dbGaPID\n        controlledAccess\n        openAccess\n        PI\n        ORCID\n        createdAt\n      }\n    }\n  }\n"])));var Nn;(0,S.ZP)(Nn||(Nn=(0,v.Z)(["\n  mutation createApprovedStudy(\n    $name: String!\n    $acronym: String\n    $controlledAccess: Boolean!\n    $openAccess: Boolean\n    $dbGaPID: String\n    $ORCID: String\n    $PI: String\n  ) {\n    createApprovedStudy(\n      name: $name\n      acronym: $acronym\n      controlledAccess: $controlledAccess\n      openAccess: $openAccess\n      dbGaPID: $dbGaPID\n      ORCID: $ORCID\n      PI: $PI\n    ) {\n      _id\n      studyName\n      studyAbbreviation\n      dbGaPID\n      controlledAccess\n      openAccess\n      PI\n      ORCID\n      createdAt\n    }\n  }\n"])));var Rn;(0,S.ZP)(Rn||(Rn=(0,v.Z)(["\n  mutation updateApprovedStudy(\n    $studyID: ID!\n    $name: String!\n    $acronym: String\n    $controlledAccess: Boolean!\n    $openAccess: Boolean\n    $dbGaPID: String\n    $ORCID: String\n    $PI: String\n  ) {\n    updateApprovedStudy(\n      studyID: $studyID\n      name: $name\n      acronym: $acronym\n      controlledAccess: $controlledAccess\n      openAccess: $openAccess\n      dbGaPID: $dbGaPID\n      ORCID: $ORCID\n      PI: $PI\n    ) {\n      _id\n      studyName\n      studyAbbreviation\n      dbGaPID\n      controlledAccess\n      openAccess\n      PI\n      ORCID\n      createdAt\n    }\n  }\n"])));var Bn;(0,S.ZP)(Bn||(Bn=(0,v.Z)(["\n  query getApprovedStudy($_id: ID!) {\n    getApprovedStudy(_id: $_id) {\n      _id\n      studyName\n      studyAbbreviation\n      dbGaPID\n      controlledAccess\n      openAccess\n      PI\n      ORCID\n      createdAt\n    }\n  }\n"])));var Tn;(0,S.ZP)(Tn||(Tn=(0,v.Z)(["\n  mutation createOrganization(\n    $name: String!\n    $abbreviation: String!\n    $description: String\n    $conciergeID: String\n    $studies: [ApprovedStudyInput]\n  ) {\n    createOrganization(\n      name: $name\n      abbreviation: $abbreviation\n      description: $description\n      conciergeID: $conciergeID\n      studies: $studies\n    ) {\n      _id\n      name\n      abbreviation\n      description\n      status\n      conciergeID\n      conciergeName\n      studies {\n        _id\n        studyName\n        studyAbbreviation\n      }\n      createdAt\n      updateAt\n    }\n  }\n"])));var En;(0,S.ZP)(En||(En=(0,v.Z)(["\n  mutation {\n    grantToken {\n      tokens\n      message\n    }\n  }\n"])));var On;(0,S.ZP)(On||(On=(0,v.Z)(["\n  query getDashboardURL($type: String!) {\n    getDashboardURL(type: $type) {\n      url\n    }\n  }\n"])));const wn=()=>{const n={ddgraph:r.nQ,versionInfo:r.Az,submission:r.Ct},t=(0,g.createStore)((0,g.combineReducers)(n));return t.injectReducer=(e,i)=>{n[e]=i,t.replaceReducer((0,g.combineReducers)(n))},t},qn=()=>{const[n,t]=(0,i.useState)("waiting"),[e,s]=(0,i.useState)(wn()),[o,{error:a}]=(0,D.t)(O,{context:{clientName:"backend"},fetchPolicy:"cache-and-network"});return[{status:n,store:e},()=>{t("loading"),s(wn())},async n=>{var i,s,d;if(null===n||void 0===n||!n.name||null===n||void 0===n||!n.assets||null===n||void 0===n||!n.assets.path||null===(i=n.configuration)||void 0===i||!i.pdfConfig)return void t("error");t("loading");const u=(0,c.zI)(n),l=await(null===(s=(0,r.oY)(...u.model_files))||void 0===s?void 0:s.catch((n=>(c.Yd.error(n),null))));if(null===l||void 0===l||!l.data||null===l||void 0===l||!l.version)return void t("error");let m;const{cdeMap:p,data:$}=l;if(p){const n=Array.from(l.cdeMap.values());try{const t=await o({variables:{cdeInfo:n.map((n=>{let{CDECode:t,CDEVersion:e}=n;return{CDECode:t,CDEVersion:e}}))}});if(a)m=(0,c.cK)(p,$,[],!0);else{const n=(0,I.defaultTo)(t.data.retrieveCDEs,[]);m=(0,c.cK)(p,$,n)}}catch(g){m=(0,c.cK)(p,$,[],!0)}}else m=$;e.dispatch({type:"RECEIVE_VERSION_INFO",data:l.version}),e.dispatch({type:"REACT_FLOW_GRAPH_DICTIONARY",dictionary:m,pdfDownloadConfig:n.configuration.pdfConfig,graphViewConfig:b}),e.dispatch({type:"RECEIVE_DICTIONARY",payload:{data:m,facetfilterConfig:{...f,facetSearchData:n.configuration.facetFilterSearchData,facetSectionVariables:n.configuration.facetFilterSectionVariables,baseFilters:(0,c.dh)(n),filterSections:n.configuration.facetFilterSearchData.map((n=>null===n||void 0===n?void 0:n.datafield)),filterOptions:(0,c.gu)(n)},pageConfig:{title:n.configuration.pageTitle,iconSrc:u.navigator_icon},readMeConfig:{readMeUrl:u.readme,readMeTitle:(null===(d=n.configuration)||void 0===d?void 0:d.readMeTitle)||"Understanding the Data Model",allowDownload:!1},pdfDownloadConfig:n.configuration.pdfConfig,loadingExampleConfig:{type:"static",url:u.loading_file},graphViewConfig:b}}),e.dispatch({type:"SEARCH_CLEAR_HISTORY"}),t("success")}]},Fn=()=>{var n;const{status:t,DataCommon:e}=(()=>{const n=(0,i.useContext)(p);if(!n)throw new Error("useDataCommonContext cannot be used outside of the DataCommonProvider component");return n})(),[{status:s,store:c},,m]=qn();if(t===l.LOADING||"loading"===s)return(0,u.jsx)(d.Z,{});if(t===l.LOADED&&"waiting"===s)return m(e),(0,u.jsx)(d.Z,{});if(!e||t===l.ERROR||"error"===s)throw new Error("Unable to build Model Navigator for the selected Data Common");return(0,u.jsx)(o.Z,{sx:{mt:"40px"},children:(0,u.jsx)(a.Provider,{store:c,children:(0,u.jsx)(r.vD,{pdfDownloadConfig:null===(n=e.configuration)||void 0===n?void 0:n.pdfConfig})})})};var xn=e(9615);class Gn extends i.Component{constructor(n){super(n),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}render(){const{children:n,errorMessage:t}=this.props,{hasError:e}=this.state;return e?(0,u.jsx)(xn.Z,{sx:{m:3,p:2},severity:"error","data-testid":"error-boundary-alert",children:t||"Error loading component."}):n}}const kn=Gn;var Ln=e(941);const Un=()=>{(0,Ln.Z)("Model Navigator");const n=new URLSearchParams((0,s.TH)().search).get("config")||"https://raw.githubusercontent.com/jonkiky/crdc-data-model-navigator/refs/heads/data/ctdc";return(0,u.jsx)($,{DataCommon:n,children:(0,u.jsx)(kn,{errorMessage:"Unable to load the Model Navigator for the requested model",children:(0,u.jsx)(Fn,{})})},n)}},941:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(72791);const s=function(n){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];(0,i.useEffect)((()=>{document.title=n}),[n]),(0,i.useEffect)((()=>t?()=>{document.title="CRDC Submission Portal"}:()=>{}),[])}},42480:()=>{}}]);
//# sourceMappingURL=333.9106f5c8.chunk.js.map